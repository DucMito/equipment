Day la file InvoiceManageController:
- Logic xong hết rồi cần có data để test lại full các trước hợp.
- Lưu ý dữ liệu mỗi trường hợp ở nhiều bảng khác nhau
- Trường hợp "PARTIAL" hiện tại chỉ thông báo lỗi chờ transaction đủ dữ liệu mới hiển thị ra hết tờ khai( cần phải sửa mã hàng nào lỗi cho continue(xử lý sau đến khi up xml data mới lên) và vẫn phải hiển thị hết mã hàng thành công, còn hiện tại trong code mới chỉ thông báo lỗi không hiển thị những mã hàng thành công, còn đã tính toán hết mã hàng thành công rồi)
- Chỉ cần xem lại logic sao gặp mã hàng lỗi lại chưa hiển thị data xuống dưới khi bấm vảo process, còn trường hợp full mã thì hiển thị data luôn
Chúc may mắn.
 

#region

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Objects.SqlClient;
using System.Data.OleDb;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Transactions;
using System.Web.Hosting;
using System.Web.Mvc;
using Denso.Common;
using ImexControl.BaseCommon;
using ImexControl.Common;
using ImexControl.Models;
using log4net;
using IsolationLevel = System.Transactions.IsolationLevel;

#endregion

namespace ImexControl.Controllers
{
    public class InvoiceManageController : BaseController
    {
        private readonly ILog _log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
        //Declare Entity Framework
        private readonly ImexControlDbEntities _entities = new ImexControlDbEntities();

        [Authorize]
        public ActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public JsonResult ListInvoice(int page = 0, int rows = 0, string invoiceNumber = "", string partno = "")
        {
            System.Web.HttpContext.Current.Session["suggestList"] = null;
            try
            {
                var listModels =
                    (from a in
                         _entities.InvoiceManagements.Where(
                             d => string.IsNullOrEmpty(invoiceNumber) ? true : d.InvoiceNumber.Contains(invoiceNumber.Trim()))
                     select a).Distinct().AsEnumerable().Select(p => new InvoiceModel
                     {
                         InvoiceId = p.InvoiceId,
                         InvoiceNumber = p.InvoiceNumber,
                         Destination = p.Destination,
                         DateRegister = p.DateRegister,
                         ATT = p.ATT,
                         Currency = p.Currency,
                         Trade = p.Trade,
                         Customer = p.Customer,
                         Forwarder = p.Forwarder,
                         CreateBy = p.CreateBy,
                         Via = p.Via,
                         Freight = p.Freight,
                         GW = p.GW,
                         NW = p.NW,
                         Package = p.Package,
                         PoNo = p.PoNo,
                         Purpose = p.Purpose,
                         Type = p.Type,
                         FromDate = p.FromDate,
                         Active = p.Active,
                         CustomerName = Helper.GetCustomerName(p.Customer ?? 0)
                     }).OrderByDescending(p => p.DateRegister).ToList();
                //var listModels = new List<InvoiceModel>();

                if (!String.IsNullOrEmpty(partno))
                {
                    listModels = (from a in listModels
                                  from b in _entities.InvoiceDetails
                                  where a.InvoiceId == b.InvoiceId && b.PartId.Contains(partno.Trim())
                                  select a).Distinct().ToList();
                }

                var totalRecords = listModels.Count;
                listModels = rows > 0
                    ? listModels.Skip((page - 1) * rows).Take(rows).ToList()
                    : listModels.ToList();

                return Json(new
                {
                    Result = "OK",
                    total = (totalRecords + rows - 1) / rows,
                    page,
                    records = totalRecords,
                    rows = listModels
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }

        public JsonResult AddInvoice(InvoiceManagement model)
        {
            try
            {
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                if (String.IsNullOrEmpty(loginCode))
                {
                    return Json(new { Result = "ERROR", Message = "Mời bạn login lại" });
                }
                var checkExist = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceNumber == model.InvoiceNumber);
                if (checkExist != null)
                {
                    return Json(new { Result = "ERROR", Message = "Số hóa đơn đã tồn tại" });
                }
                if (model.Type == (int)InvoiceTypeEnum.Tainhap || model.Type == (int)InvoiceTypeEnum.Tamnhap)
                {
                    _entities.InvoiceManagements.AddObject(new InvoiceManagement
                    {
                        InvoiceNumber = model.InvoiceNumber,
                        Type = model.Type,
                        DateRegister = DateTime.Now,
                        Customer = model.Customer,
                        CreateBy = loginCode
                    });
                }
                else if (model.Type == (int)InvoiceTypeEnum.A31E42)
                {
                    _entities.InvoiceManagements.AddObject(new InvoiceManagement
                    {
                        InvoiceNumber = model.InvoiceNumber,
                        Type = model.Type,
                        DateRegister = DateTime.Now,
                        Customer = model.Customer,
                        FromDate = model.FromDate,
                        CreateBy = loginCode
                    });
                }
                else
                {
                    /*if (string.IsNullOrEmpty(model.ATT) || string.IsNullOrEmpty(model.InvoiceNumber) ||
                        string.IsNullOrEmpty(model.Currency) || string.IsNullOrEmpty(model.Destination)
                        || string.IsNullOrEmpty(model.Forwarder) || string.IsNullOrEmpty(model.Freight) ||
                        string.IsNullOrEmpty(model.GW) || string.IsNullOrEmpty(model.NW)
                        || string.IsNullOrEmpty(model.Package) || string.IsNullOrEmpty(model.PoNo) ||
                        string.IsNullOrEmpty(model.Purpose) || string.IsNullOrEmpty(model.Trade) ||
                        string.IsNullOrEmpty(model.Via))
                    {
                        return Json(new { Result = "ERROR", Message = "Mời bạn nhập đủ thông tin" });
                    }*/

                    if (string.IsNullOrEmpty(model.InvoiceNumber) || string.IsNullOrEmpty(model.Purpose))
                    {
                        return Json(new { Result = "ERROR", Message = "Mời bạn nhập đủ thông tin" });
                    }

                    _entities.InvoiceManagements.AddObject(new InvoiceManagement
                    {
                        Destination = model.Destination,
                        InvoiceNumber = model.InvoiceNumber,
                        ATT = model.ATT,
                        Currency = model.Currency,
                        Trade = model.Trade,
                        Customer = model.Customer,
                        Forwarder = model.Forwarder,
                        Freight = model.Freight,
                        GW = model.GW,
                        NW = model.NW,
                        Package = model.Package,
                        PoNo = model.PoNo,
                        Purpose = model.Purpose,
                        Type = model.Type,
                        Via = model.Via,
                        FromDate = model.FromDate,
                        DateRegister = DateTime.Now,
                        CreateBy = loginCode
                    });
                }
                _entities.SaveChanges();
                return Json(new { Result = "OK", Record = model });
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }

        public JsonResult EditInvoice(InvoiceManagement model)
        {
            try
            {
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                var record = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceNumber == model.InvoiceNumber);
                if (loginCode != record.CreateBy)
                {
                    if (loginCode != "9171")
                    {
                        return Json(new { Result = "ERROR", Message = "Bạn không phải người tạo invoice này" });
                    }
                }
                if (record.Active == true)
                {
                    return Json(new { Result = "ERROR", Message = "Hóa đơn này đã được nhập vào tờ khai" });
                }
                if (model.Type == (int)InvoiceTypeEnum.Tainhap || model.Type == (int)InvoiceTypeEnum.Tamnhap)
                {
                    record.Type = model.Type;
                    record.Destination = null;
                    record.ATT = null;
                    record.Currency = null;
                    record.Trade = null;
                    record.Forwarder = null;
                    record.Freight = null;
                    record.GW = null;
                    record.NW = null;
                    record.Package = null;
                    record.PoNo = null;
                    record.Purpose = null;
                    record.Via = null;
                }
                else if (model.Type == (int)InvoiceTypeEnum.A31E42)
                {
                    record.Type = model.Type;
                    record.Destination = null;
                    record.ATT = null;
                    record.Currency = null;
                    record.Trade = null;
                    record.Forwarder = null;
                    record.Freight = null;
                    record.GW = null;
                    record.NW = null;
                    record.Package = null;
                    record.PoNo = null;
                    record.Purpose = null;
                    record.Via = null;
                    record.FromDate = model.FromDate;
                }
                else
                {
                    /*if (string.IsNullOrEmpty(model.ATT) || string.IsNullOrEmpty(model.InvoiceNumber) ||
                        string.IsNullOrEmpty(model.Currency) || string.IsNullOrEmpty(model.Destination)
                        || string.IsNullOrEmpty(model.Forwarder) || string.IsNullOrEmpty(model.Freight) ||
                        string.IsNullOrEmpty(model.GW) || string.IsNullOrEmpty(model.NW)
                        || string.IsNullOrEmpty(model.Package) || string.IsNullOrEmpty(model.PoNo) ||
                        string.IsNullOrEmpty(model.Purpose) || string.IsNullOrEmpty(model.Trade) ||
                        string.IsNullOrEmpty(model.Via))
                    {
                        return Json(new { Result = "ERROR", Message = "Mời bạn nhập đủ thông tin" });
                    }*/

                    if (string.IsNullOrEmpty(model.InvoiceNumber) || string.IsNullOrEmpty(model.Purpose))
                    {
                        return Json(new { Result = "ERROR", Message = "Mời bạn nhập đủ thông tin" });
                    }

                    record.Destination = model.Destination;
                    record.ATT = model.ATT;
                    record.Currency = model.Currency;
                    record.Trade = model.Trade;
                    record.Customer = model.Customer;
                    record.Forwarder = model.Forwarder;
                    record.Freight = model.Freight;
                    record.GW = model.GW;
                    record.NW = model.NW;
                    record.Package = model.Package;
                    record.PoNo = model.PoNo;
                    record.Purpose = model.Purpose;
                    record.Type = model.Type;
                    record.Via = model.Via;
                    //B13 cho E11 & E15
                    if (model.Type == (int)InvoiceTypeEnum.B13E11)
                    {
                        record.FromDate = model.FromDate;
                    }
                }
                _entities.SaveChanges();
                return Json(new { Result = "OK", Record = model });
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }

        public JsonResult DeleteInvoice(long InvoiceId)
        {
            try
            {
                var invoice = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == InvoiceId);
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                if (loginCode != invoice.CreateBy)
                {
                    if (loginCode != "9171")
                    {
                        return Json(new { Result = "ERROR", Message = "Bạn không phải người tạo invoice này" });
                    }
                }
                if (invoice.Active == true)
                {
                    return Json(new { Result = "ERROR", Message = "Hóa đơn này đã được nhập vào tờ khai" });
                }
                var listInvoiceDetail = _entities.InvoiceDetails.Where(p => p.InvoiceId == InvoiceId).ToList();

                var listTempInvoice = (from a in _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoice.InvoiceNumber)
                                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
                                       join c in _entities.InvoiceDetails on a.InvoiceDetailId equals c.InvoiceDetailId
                                       where c.InvoiceId == InvoiceId
                                       select new TempPartInvoiceModel
                                       {
                                           TempInvoiceId = a.Id,
                                           Quantity = a.Quantity
                                       }).ToList();

                foreach (var t in listTempInvoice)
                {
                    if (invoice.Type == (int)InvoiceTypeEnum.B13E11)
                    {
                        var storePart =
                            _entities.StoreParts.FirstOrDefault(
                                p => p.PartProductId.ToUpper() == t.PartId.ToUpper());
                        var oldRemain = storePart.Remain;
                        storePart.TotalOut = storePart.TotalOut - t.Quantity;
                        storePart.Remain = storePart.RemainBefore + storePart.TotalIn - storePart.TotalOut +
                                           (storePart.QuantityTlip ?? 0);
                        _entities.LogTransactions.AddObject(new LogTransaction()
                        {
                            PartProductId = storePart.PartProductId,
                            Quantity = t.Quantity,
                            BeforeRemain = oldRemain,
                            AfterRemain = storePart.Remain ?? 0,
                            Employee = loginCode,
                            Date = DateTime.Now,
                            TranType =
                                LogTransationEnum.DeleteInvoice.ToDescription(),
                            Negative = false
                        });
                    }
                    var tempInvoice = _entities.TempPartInvoices.FirstOrDefault(p => p.Id == t.TempInvoiceId);
                    var tempTk = _entities.TempTks.FirstOrDefault(p => p.TempTkId == tempInvoice.TempTkId);
                    //cập nhật lại số lượng (cộng lại phần bị xóa)
                    tempTk.Remain = tempTk.Remain + tempInvoice.Quantity;
                    _entities.TempPartInvoices.DeleteObject(tempInvoice);
                }
                invoice.InvoiceDetails.ToList().ForEach(p => _entities.InvoiceDetails.DeleteObject(p));
                _entities.InvoiceManagements.DeleteObject(invoice);
                _entities.SaveChanges();
                return Json(new { Result = "OK" });
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }

        public JsonResult ListInvoiceDetail(long invoiceId = 0, int page = 0, int rows = 0)
        {
            try
            {
                var list =
                    _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceId).Select(p => new InvoiceDetailModel
                    {
                        InvoiceId = invoiceId,
                        InvoiceDetailId =
                            p.InvoiceDetailId,
                        Remain = p.Remain,
                        OutCountry =
                            p.OutCountry,
                        InvoiceTemporary = p.InvoiceTemporary,
                        Quantity = p.Quantity,
                        PartId = p.PartId,
                        Origin = p.Origin,
                        Unit = p.Unit,
                        PartProductName =
                            p.PartProductName,
                        Price = p.Price ?? 0,
                        PartDetailId = p.PartDetailId
                    }).ToList();
                var totalRecords = list.Count;
                list = rows > 0
                    ? list.Skip((page - 1) * rows).Take(rows).ToList()
                    : list.ToList();
                return Json(new
                {
                    Result = "OK",
                    total = (totalRecords + rows - 1) / rows,
                    page,
                    records = totalRecords,
                    rows = list
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }

        public JsonResult AddInvoiceDetail(InvoiceDetail model, long invoiceId = 0)
        {
            try
            {
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                var product = (from u in _entities.ImParts
                               select u.PartProductId).Distinct().ToList()
                    .Union(from u in _entities.ExProducts
                           select u.PartProductId).Distinct().ToList();
                if (!string.IsNullOrEmpty(model.OutCountry))
                {
                    var suppliers =
                        _entities.SupplierCustomers.Where(p => p.ShortName == model.OutCountry).FirstOrDefault();
                    if (suppliers == null)
                    {
                        return
                  Json(new { Result = "ERROR", Message = "Không tìm thấy nhà cung cấp" });
                    }
                }
                var listPartNo = product.Select(p => p).Distinct().ToList();
                if (!listPartNo.Contains(model.PartId))
                {
                    return Json(new { Result = "ERROR", Message = "Mã hàng này chưa có dữ liệu" });
                }
                var invoiceRecord = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == invoiceId);
                if (invoiceRecord.Active == true)
                {
                    return Json(new { Result = "ERROR", Message = "Hóa đơn này đã được nhập vào tờ khai" });
                }
                var checkExist =
                    _entities.InvoiceDetails.FirstOrDefault(
                        p => p.PartId == model.PartId && p.InvoiceId == invoiceId);
                if (checkExist != null)
                {
                    if (model.PartDetailId == null || model.PartDetailId == checkExist.PartDetailId)
                    {
                        return Json(new { Result = "ERROR", Message = "Bạn phải nhập mã phụ hoặc nhập mã phụ trùng" });
                    }
                }
                //var checkSupplier = _entities.SupplierCustomers.FirstOrDefault(p => p.ShortName == model.OutCountry);
                //if (checkSupplier == null)
                //{
                //    return Json(new { Result = "ERROR", Message = "Nhà cung cấp không có trong database" });
                //}
                var transOpts = new TransactionOptions(); //Tao mot transaction de xu ly tat ca
                transOpts.IsolationLevel = IsolationLevel.Serializable;
                using (var scope = new TransactionScope(TransactionScopeOption.Required, transOpts))
                {
                    _entities.InvoiceDetails.AddObject(new InvoiceDetail
                    {
                        InvoiceId = invoiceId,
                        PartId = model.PartId,
                        Quantity = model.Quantity,
                        Remain = model.Quantity,
                        InvoiceTemporary = model.InvoiceTemporary,
                        PartDetailId = model.PartDetailId,
                        OutCountry = model.OutCountry,
                        Unit = model.Unit,
                        Origin = model.Origin,
                        Price = model.Price,
                        PartProductName = model.PartProductName
                    });
                    // _entities.SaveChanges();
                    var listInvoiceDetail =
                        _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();
                    foreach (var l in listInvoiceDetail)
                    {
                        l.Remain = l.Quantity;
                    }
                    var recordInvoice = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == invoiceId);
                    var listTempInvoice = (from a in _entities.TempPartInvoices.Where(p => p.InvoiceNumber == recordInvoice.InvoiceNumber)
                                           join b in _entities.TempTks on a.TempTkId equals b.TempTkId
                                           join c in _entities.InvoiceDetails on a.InvoiceDetailId equals c.InvoiceDetailId
                                           where c.InvoiceId == invoiceId
                                           select new TempPartInvoiceModel
                                           {
                                               TempInvoiceId = a.Id,
                                               PartDetailId = b.PartDetailId,
                                               PartId = c.PartId,
                                               Quantity = a.Quantity
                                           }).ToList();
                    foreach (var t in listTempInvoice)
                    {
                        if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
                        {
                            var storePart =
                                _entities.StoreParts.FirstOrDefault(
                                    p => p.PartProductId.ToUpper() == t.PartId.ToUpper());
                            var oldRemain = storePart.Remain;
                            storePart.TotalOut = storePart.TotalOut - t.Quantity;
                            storePart.Remain = storePart.RemainBefore + storePart.TotalIn - storePart.TotalOut +
                                               (storePart.QuantityTlip ?? 0);

                            //LogCommon.SaveLog(_entities, new LogTransaction()
                            //                             {
                            //                                 PartProductId = storePart.PartProductId,
                            //                                 Quantity = t.Quantity,
                            //                                 BeforeRemain = oldRemain,
                            //                                 AfterRemain = storePart.Remain ?? 0,
                            //                                 Employee = loginCode,
                            //                                 Date = DateTime.Now,
                            //                                 TranType =
                            //                                     LogTransationEnum.AddInvoiceDetail.ToDescription(),
                            //                                 Negative = false
                            //                             });
                        }
                        var tempInvoice = _entities.TempPartInvoices.FirstOrDefault(p => p.Id == t.TempInvoiceId);
                        var tempTk = _entities.TempTks.FirstOrDefault(p => p.TempTkId == tempInvoice.TempTkId);
                        tempTk.Remain = tempTk.Remain + tempInvoice.Quantity;
                        _entities.TempPartInvoices.DeleteObject(tempInvoice);
                    }
                    _entities.SaveChanges();
                    scope.Complete();
                }
                return Json(new { Result = "OK", Record = model });
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }

        public JsonResult EditInvoiceDetail(InvoiceDetail model)
        {
            try
            {
                var record = _entities.InvoiceDetails.FirstOrDefault(p => p.InvoiceDetailId == model.InvoiceDetailId);
                var invoiceRecord = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == record.InvoiceId);
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                if (loginCode != invoiceRecord.CreateBy)
                {
                    if (loginCode != "9171")
                    {
                        return Json(new { Result = "ERROR", Message = "Bạn không phải người tạo invoice này" });
                    }
                }
                if (invoiceRecord.Active == true)
                {
                    return Json(new { Result = "ERROR", Message = "Hóa đơn này đã được nhập vào tờ khai" });
                }
                var listInvoiceDetail =
                    _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();
                foreach (var l in listInvoiceDetail)
                {
                    l.Remain = l.Quantity;
                }
                record.PartId = model.PartId.Trim();
                record.Quantity = model.Quantity;
                record.Remain = model.Quantity;
                record.Price = model.Price;
                record.Unit = model.Unit;
                record.Origin = model.Origin;
                record.Remain = model.Quantity;
                record.OutCountry = model.OutCountry;
                record.InvoiceTemporary = model.InvoiceTemporary;
                record.PartDetailId = model.PartDetailId;
                record.PartProductName = model.PartProductName;


                var InvoiceId = record.InvoiceId;
                var recordInvoice = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == InvoiceId);
                var listTempInvoice = (from a in _entities.TempPartInvoices.Where(p => p.InvoiceNumber == recordInvoice.InvoiceNumber)
                                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
                                       join c in _entities.InvoiceDetails on a.InvoiceDetailId equals c.InvoiceDetailId
                                       where c.InvoiceId == InvoiceId
                                       select new TempPartInvoiceModel
                                       {
                                           TempInvoiceId = a.Id,
                                           PartDetailId = b.PartDetailId,
                                           PartId = c.PartId,
                                           Quantity = a.Quantity
                                       }).ToList();
                foreach (var t in listTempInvoice)
                {
                    if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
                    {
                        var storePart =
                            _entities.StoreParts.FirstOrDefault(p => p.PartProductId.ToUpper() == t.PartId.ToUpper());
                        var oldRemain = storePart.Remain;
                        storePart.TotalOut = storePart.TotalOut - t.Quantity;
                        storePart.Remain = storePart.RemainBefore + storePart.TotalIn - storePart.TotalOut +
                                           (storePart.QuantityTlip ?? 0);

                        //LogCommon.SaveLog(_entities, new LogTransaction()
                        //{
                        //    PartProductId = storePart.PartProductId,
                        //    Quantity = t.Quantity,
                        //    BeforeRemain = oldRemain,
                        //    AfterRemain = storePart.Remain ?? 0,
                        //    Employee = loginCode,
                        //    Date = DateTime.Now,
                        //    TranType =
                        //        LogTransationEnum.EditInvoiceDetail.ToDescription(),
                        //    Negative = false
                        //});
                    }
                    var tempInvoice = _entities.TempPartInvoices.FirstOrDefault(p => p.Id == t.TempInvoiceId);
                    var tempTk = _entities.TempTks.FirstOrDefault(p => p.TempTkId == tempInvoice.TempTkId);
                    tempTk.Remain = tempTk.Remain + tempInvoice.Quantity;
                    _entities.TempPartInvoices.DeleteObject(tempInvoice);
                }
                _entities.SaveChanges();
                return Json(new { Result = "OK", Record = model });
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }

        public JsonResult DeleteInvoiceDetail(long InvoiceDetailId)
        {
            try
            {
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                var record = _entities.InvoiceDetails.FirstOrDefault(p => p.InvoiceDetailId == InvoiceDetailId);
                var invoiceRecord = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == record.InvoiceId);
                if (invoiceRecord.Active == true)
                {
                    return Json(new { Result = "ERROR", Message = "Hóa đơn này đã được nhập vào tờ khai" });
                }
                var InvoiceId = record.InvoiceId;
                var recordInvoice = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == InvoiceId);
                var listTempInvoice = (from a in _entities.TempPartInvoices.Where(p => p.InvoiceNumber == recordInvoice.InvoiceNumber)
                                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
                                       join c in _entities.InvoiceDetails on a.InvoiceDetailId equals c.InvoiceDetailId
                                       where c.InvoiceId == InvoiceId
                                       select new TempPartInvoiceModel
                                       {
                                           TempInvoiceId = a.Id,
                                           PartDetailId = b.PartDetailId,
                                           PartId = c.PartId,
                                           Quantity = a.Quantity
                                       }).ToList();
                foreach (var t in listTempInvoice)
                {
                    if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
                    {
                        var storePart =
                            _entities.StoreParts.FirstOrDefault(p => p.PartProductId.ToUpper() == t.PartId.ToUpper());
                        var oldRemain = storePart.Remain;
                        storePart.TotalOut = storePart.TotalOut - t.Quantity;
                        storePart.Remain = storePart.RemainBefore + storePart.TotalIn - storePart.TotalOut +
                                           (storePart.QuantityTlip ?? 0);
                        //LogCommon.SaveLog(_entities, new LogTransaction()
                        //{
                        //    PartProductId = storePart.PartProductId,
                        //    Quantity = t.Quantity,
                        //    BeforeRemain = oldRemain,
                        //    AfterRemain = storePart.Remain ?? 0,
                        //    Employee = loginCode,
                        //    Date = DateTime.Now,
                        //    TranType =
                        //        LogTransationEnum.DeleteInvoiceDetail.ToDescription(),
                        //    Negative = false
                        //});
                    }
                    var tempInvoice = _entities.TempPartInvoices.FirstOrDefault(p => p.Id == t.TempInvoiceId);
                    var tempTk = _entities.TempTks.FirstOrDefault(p => p.TempTkId == tempInvoice.TempTkId);
                    tempTk.Remain = tempTk.Remain + tempInvoice.Quantity;
                    _entities.TempPartInvoices.DeleteObject(tempInvoice);
                }
                _entities.InvoiceDetails.DeleteObject(record);
                _entities.SaveChanges();
                return Json(new { Result = "OK", record.InvoiceId });
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return Json(new { Result = "ERROR", ex.Message });
                throw;
            }
        }


        public JsonResult Calculate(long InvoiceId = 0, int type = 0)
        {
            try
            {
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                var invoiceRecord =
                     _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == InvoiceId);
                String mess = "";
                if (type == 0)
                {
                    var transOpts = new TransactionOptions();
                    transOpts.IsolationLevel = IsolationLevel.Serializable;
                    using (var scope = new TransactionScope(TransactionScopeOption.Required, transOpts))
                    {
                        if (InvoiceId != 0)
                        {
                            if (invoiceRecord.Active == true)
                            {
                                return Json(new { Result = "ERROR", Message = "Invoice đã được đưa lên tờ khai" }, JsonRequestBehavior.AllowGet);
                            }

                            var checkTemp =
                                _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber)
                                    .ToList();
                            var listPart =
                                _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();

                            if (checkTemp.Any())
                            {
                                foreach (var c in checkTemp)
                                {
                                    var tempTk = _entities.TempTks.FirstOrDefault(p => p.TempTkId == c.TempTkId);
                                    tempTk.Remain = tempTk.Remain + c.Quantity;
                                    _entities.DeleteObject(c);
                                }
                                var listInvoiceDetail =
                                    _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();
                                foreach (var a in listInvoiceDetail)
                                {
                                    a.Remain = a.Quantity;
                                }
                                foreach (var l in listPart)
                                {
                                    if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
                                    {
                                        var storePart =
                                            _entities.StoreParts.FirstOrDefault(
                                                p => p.PartProductId.ToUpper() == l.PartId.ToUpper());
                                        var oldRemain = storePart.Remain;
                                        storePart.TotalOut = storePart.TotalOut - l.Quantity;
                                        storePart.Remain = storePart.RemainBefore + storePart.TotalIn -
                                                           storePart.TotalOut +
                                                           (storePart.QuantityTlip ?? 0);
                                    }
                                }
                                _entities.SaveChanges();
                            }

                            foreach (var l in listPart)
                            {
                                var listTk = new List<TKModel>();
                                bool hasError = false;

                                //Tái xuất
                                if (invoiceRecord.Type == (int)InvoiceTypeEnum.Taixuat)
                                {
                                    var now = DateTime.Now.Date;
                                    var lots = (
                                        from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
                                        join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
                                        where
                                            (b.xCategoryCode == "G12" || b.xCategoryCode == "G14" || b.xCategoryCode == "G13") &&
                                            b.Disable == null &&
                                            (l.OutCountry == null || b.Supplier == l.OutCountry) &&
                                            ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary) &&
                                            (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
                                        select new
                                        {
                                            xSheetNumber = a.xSheetNumber,
                                            xQuantity = a.xQuantity,
                                            Remain = a.xRemain,
                                            xDueDate = b.ReviseDate ?? b.xDueDate,
                                            Status = b.Status,
                                            Id = a.ImPartId,
                                            InvoiceDetailId = l.InvoiceDetailId,
                                            DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xDueDate) ?? 0
                                        }
                                    ).ToList();

                                    _log.Info($"[Calculate] PartId={l.PartId}, Số lô tìm được={lots.Count}");
                                    var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
                                    var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

                                    double totalLess30 = lessThan30.Sum(x => x.Remain);
                                    double quantity = l.Quantity;
                                    List<dynamic> selectedLots = new List<dynamic>(lessThan30);

                                    if (totalLess30 < quantity)
                                    {
                                        double need = quantity - totalLess30;
                                        var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
                                        if (bestCombo == null)
                                        {
                                            mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
                                            hasError = true;
                                        }
                                        else
                                        {
                                            selectedLots.AddRange(bestCombo);
                                        }
                                    }
                                    else
                                    {
                                        double sum = 0;
                                        selectedLots = new List<dynamic>();
                                        foreach (var lot in lessThan30)
                                        {
                                            if (sum >= quantity) break;
                                            double take = Math.Min(lot.Remain, quantity - sum);
                                            selectedLots.Add(lot);
                                            sum += take;
                                        }
                                    }

                                    listTk = selectedLots.Select(x => new TKModel
                                    {
                                        xSheetNumber = x.xSheetNumber,
                                        xQuantity = x.xQuantity,
                                        Remain = x.Remain,
                                        xDueDate = x.xDueDate,
                                        Status = x.Status,
                                        Id = x.Id,
                                        InvoiceDetailId = x.InvoiceDetailId
                                    }).ToList();
                                }
                                //Tái nhập
                                else if (invoiceRecord.Type == (int)InvoiceTypeEnum.Tainhap)
                                {
                                    var now = DateTime.Now.Date;
                                    var lots = (
                                        from a in _entities.ExProducts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
                                        join b in _entities.EXes on a.xSheetNumber equals b.xSheetNumber
                                        where b.xCategoryCode == "G61"
                                            && b.Disable == null
                                            && (
                                                l.OutCountry == null
                                                || (l.OutCountry == "STB" || l.OutCountry == "DSTH"
                                                    ? (b.Supplier == "DSTH" || b.Supplier == "STB")
                                                    : b.Supplier == l.OutCountry)
                                            )
                                            && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary)
                                            && (l.PartDetailId == null || a.ProductId == l.PartDetailId)
                                        select new
                                        {
                                            xSheetNumber = a.xSheetNumber,
                                            xQuantity = a.xQuantity,
                                            Remain = a.xRemain ?? 0,
                                            xDueDate = b.ReviseDate ?? b.xDueDate,
                                            Status = b.Status,
                                            Id = a.ProductId,
                                            InvoiceDetailId = l.InvoiceDetailId,
                                            DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xDueDate) ?? 0
                                        }
                                    ).ToList();

                                    var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
                                    var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

                                    double totalLess30 = lessThan30.Sum(x => x.Remain);
                                    double quantity = l.Quantity;
                                    List<dynamic> selectedLots = new List<dynamic>(lessThan30);

                                    if (totalLess30 < quantity)
                                    {
                                        double need = quantity - totalLess30;
                                        var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
                                        if (bestCombo == null)
                                        {
                                            mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
                                            hasError = true;
                                        }
                                        else
                                        {
                                            selectedLots.AddRange(bestCombo);
                                        }
                                    }
                                    else
                                    {
                                        double sum = 0;
                                        selectedLots = new List<dynamic>();
                                        foreach (var lot in lessThan30)
                                        {
                                            if (sum >= quantity) break;
                                            double take = Math.Min(lot.Remain, quantity - sum);
                                            selectedLots.Add(lot);
                                            sum += take;
                                        }
                                    }

                                    listTk = selectedLots.Select(x => new TKModel
                                    {
                                        xSheetNumber = x.xSheetNumber,
                                        xQuantity = x.xQuantity,
                                        Remain = x.Remain,
                                        xDueDate = x.xDueDate,
                                        Status = x.Status,
                                        Id = x.Id,
                                        InvoiceDetailId = x.InvoiceDetailId
                                    }).ToList();
                                }





                                //B13 cho A31
                                else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13A31)
                                {
                                    var now = DateTime.Now.Date;
                                    var lots = (
                                        from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
                                        join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
                                        where (b.xCategoryCode == "A31") && b.Disable == null
                                            && (l.OutCountry == null || b.Supplier == l.OutCountry)
                                            && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
                                        select new
                                        {
                                            xSheetNumber = a.xSheetNumber,
                                            xQuantity = a.xQuantity,
                                            Remain = a.xRemain,
                                            xDueDate = b.ReviseDate ?? b.xDueDate,
                                            Status = b.Status,
                                            Id = a.ImPartId,
                                            InvoiceDetailId = l.InvoiceDetailId,
                                            DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
                                        }
                                    ).ToList();

                                    var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
                                    var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

                                    double totalLess30 = lessThan30.Sum(x => x.Remain);
                                    double quantity = l.Quantity;
                                    List<dynamic> selectedLots = new List<dynamic>(lessThan30);

                                    if (totalLess30 < quantity)
                                    {
                                        double need = quantity - totalLess30;
                                        var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
                                        if (bestCombo == null)
                                        {
                                            mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
                                            hasError = true;
                                        }
                                        else
                                        {
                                            selectedLots.AddRange(bestCombo);
                                        }
                                    }
                                    else
                                    {
                                        // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
                                        double sum = 0;
                                        selectedLots = new List<dynamic>();
                                        foreach (var lot in lessThan30)
                                        {
                                            if (sum >= quantity) break;
                                            double take = Math.Min(lot.Remain, quantity - sum);
                                            selectedLots.Add(lot);
                                            sum += take;
                                        }
                                    }

                                    // Chuyển selectedLots sang listTk (TKModel)
                                    listTk = selectedLots.Select(x => new TKModel
                                    {
                                        xSheetNumber = x.xSheetNumber,
                                        xQuantity = x.xQuantity,
                                        Remain = x.Remain,
                                        xDueDate = x.xDueDate,
                                        Status = x.Status,
                                        Id = x.Id,
                                        InvoiceDetailId = x.InvoiceDetailId
                                    }).ToList();
                                }






                                //B13 cho A12/E13
                                else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13A12)
                                {
                                    var now = DateTime.Now.Date;
                                    var lots = (
                                        from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
                                        join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
                                        where (b.xCategoryCode == "A12" || b.xCategoryCode == "E13")
                                            && b.Disable == null
                                            && (l.OutCountry == null || b.Supplier == l.OutCountry)
                                            && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
                                            && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary)
                                        select new
                                        {
                                            xSheetNumber = a.xSheetNumber,
                                            xQuantity = a.xQuantity,
                                            Remain = a.xRemain,
                                            xDueDate = b.ReviseDate ?? b.xDueDate,
                                            Status = b.Status,
                                            Id = a.ImPartId,
                                            InvoiceDetailId = l.InvoiceDetailId,
                                            DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
                                        }
                                    ).ToList();

                                    var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
                                    var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

                                    double totalLess30 = lessThan30.Sum(x => x.Remain);
                                    double quantity = l.Quantity;
                                    List<dynamic> selectedLots = new List<dynamic>(lessThan30);

                                    if (totalLess30 < quantity)
                                    {
                                        double need = quantity - totalLess30;
                                        var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
                                        if (bestCombo == null)
                                        {
                                            mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
                                            hasError = true;
                                        }
                                        else
                                        {
                                            selectedLots.AddRange(bestCombo);
                                        }
                                    }
                                    else
                                    {
                                        // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
                                        double sum = 0;
                                        selectedLots = new List<dynamic>();
                                        foreach (var lot in lessThan30)
                                        {
                                            if (sum >= quantity) break;
                                            double take = Math.Min(lot.Remain, quantity - sum);
                                            selectedLots.Add(lot);
                                            sum += take;
                                        }
                                    }

                                    // Chuyển selectedLots sang listTk (TKModel)
                                    listTk = selectedLots.Select(x => new TKModel
                                    {
                                        xSheetNumber = x.xSheetNumber,
                                        xQuantity = x.xQuantity,
                                        Remain = x.Remain,
                                        xDueDate = x.xDueDate,
                                        Status = x.Status,
                                        Id = x.Id,
                                        InvoiceDetailId = x.InvoiceDetailId
                                    }).ToList();
                                }




                                //B13 cho E11/E15
                                else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
                                {
                                    var storePart =
                                        _entities.StoreParts.FirstOrDefault(
                                            p => p.PartProductId.ToUpper() == l.PartId.ToUpper());
                                    var oldRemain = storePart.Remain;
                                    storePart.TotalOut = storePart.TotalOut + l.Quantity;
                                    storePart.Remain = storePart.RemainBefore + storePart.TotalIn - storePart.TotalOut +
                                                       (storePart.QuantityTlip ?? 0);
                                    _entities.SaveChanges();

                                    var now = DateTime.Now.Date;
                                    var lots = (
                                        from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
                                        join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
                                        where
                                            (b.xCategoryCode == "E11" || b.xCategoryCode == "E15") &&
                                            b.Disable == null &&
                                            (b.Temporary.Value == false || b.Temporary == null)
                                            && (l.OutCountry == null || b.Supplier == l.OutCountry)
                                            && (l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "thanhkhoan" || l.InvoiceTemporary.ToLower() == "vldg" || b.xInvoiceNumber == l.InvoiceTemporary)
                                            && (invoiceRecord.FromDate == null ||
                                                (b.DateReceiveActual != null
                                                    ? b.DateReceiveActual >= invoiceRecord.FromDate
                                                    : b.xDateReceiveDmvn >= invoiceRecord.FromDate))
                                            && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
                                        select new
                                        {
                                            xSheetNumber = a.xSheetNumber,
                                            xQuantity = a.xQuantity,
                                            Remain = a.xRemain,
                                            xDueDate = b.ReviseDate ?? b.xDueDate,
                                            Status = b.Status,
                                            Id = a.ImPartId,
                                            InvoiceDetailId = l.InvoiceDetailId,
                                            DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
                                        }
                                    ).ToList();

                                    var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
                                    var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

                                    double totalLess30 = lessThan30.Sum(x => x.Remain);
                                    double quantity = l.Quantity;
                                    List<dynamic> selectedLots = new List<dynamic>(lessThan30);

                                    if (totalLess30 < quantity)
                                    {
                                        double need = quantity - totalLess30;
                                        var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
                                        if (bestCombo == null)
                                        {
                                            mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
                                            hasError = true;
                                        }
                                        else
                                        {
                                            selectedLots.AddRange(bestCombo);
                                        }
                                    }
                                    else
                                    {
                                        // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
                                        double sum = 0;
                                        selectedLots = new List<dynamic>();
                                        foreach (var lot in lessThan30)
                                        {
                                            if (sum >= quantity) break;
                                            double take = Math.Min(lot.Remain, quantity - sum);
                                            selectedLots.Add(lot);
                                            sum += take;
                                        }
                                    }

                                    // Chuyển selectedLots sang listTk (TKModel)
                                    listTk = selectedLots.Select(x => new TKModel
                                    {
                                        xSheetNumber = x.xSheetNumber,
                                        xQuantity = x.xQuantity,
                                        Remain = x.Remain,
                                        xDueDate = x.xDueDate,
                                        Status = x.Status,
                                        Id = x.Id,
                                        InvoiceDetailId = x.InvoiceDetailId
                                    }).ToList();
                                }



                                // A31 cho E42
                                else if (invoiceRecord.Type == (int)InvoiceTypeEnum.A31E42)
                                {
                                    var now = DateTime.Now.Date;
                                    var lots = (
                                        from a in _entities.ExProducts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
                                        join b in _entities.EXes on a.xSheetNumber equals b.xSheetNumber
                                        where
                                            (b.xCategoryCode == "E42") && b.Disable == null &&
                                            (b.Temporary.Value == false || b.Temporary == null)
                                            && (l.OutCountry == null || b.Supplier == l.OutCountry)
                                            &&
                                            (invoiceRecord.FromDate == null ||
                                                (b.DateLeaveActual != null
                                                    ? b.DateLeaveActual >= invoiceRecord.FromDate
                                                    : (b.xDateLeaveDmvn == null || b.xDateLeaveDmvn >= invoiceRecord.FromDate)))
                                            && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "thanhkhoan") || b.xInvoiceNumber == l.InvoiceTemporary)
                                            && (l.PartDetailId == null || a.ProductId == l.PartDetailId)
                                        select new
                                        {
                                            xSheetNumber = a.xSheetNumber,
                                            xQuantity = a.xQuantity,
                                            Remain = a.xRemain ?? 0,
                                            xDueDate = b.ReviseDate ?? b.xDueDate,
                                            Status = b.Status,
                                            Id = a.ProductId,
                                            InvoiceDetailId = l.InvoiceDetailId,
                                            DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
                                        }
                                    ).ToList();

                                    var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
                                    var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

                                    double totalLess30 = lessThan30.Sum(x => x.Remain);
                                    double quantity = l.Quantity;
                                    List<dynamic> selectedLots = new List<dynamic>(lessThan30);

                                    if (totalLess30 < quantity)
                                    {
                                        double need = quantity - totalLess30;
                                        var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
                                        if (bestCombo == null)
                                        {
                                            mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
                                            hasError = true;
                                        }
                                        else
                                        {
                                            selectedLots.AddRange(bestCombo);
                                        }
                                    }
                                    else
                                    {
                                        // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
                                        double sum = 0;
                                        selectedLots = new List<dynamic>();
                                        foreach (var lot in lessThan30)
                                        {
                                            if (sum >= quantity) break;
                                            double take = Math.Min(lot.Remain, quantity - sum);
                                            selectedLots.Add(lot);
                                            sum += take;
                                        }
                                    }

                                    // Chuyển selectedLots sang listTk (TKModel)
                                    listTk = selectedLots.Select(x => new TKModel
                                    {
                                        xSheetNumber = x.xSheetNumber,
                                        xQuantity = x.xQuantity,
                                        Remain = x.Remain,
                                        xDueDate = x.xDueDate,
                                        Status = x.Status,
                                        Id = x.Id,
                                        InvoiceDetailId = x.InvoiceDetailId
                                    }).ToList();
                                }



                                if (!listTk.Any())
                                {
                                    mess += l.PartId + " Không tìm thấy tờ khai để trừ, bạn vui lòng kiểm tra invoice đầu vào hoặc số lượng còn lại\n";
                                    hasError = true;
                                }

                                if (hasError)
                                    continue;

                                //List ra các tờ khai tạm mà còn lại lớn hơn 0
                                foreach (var t in listTk)
                                {
                                    if (t.xDueDate != null)
                                    {
                                        if (t.xDueDate.Value.Date < DateTime.Now.Date && t.Status != true) continue;
                                    }
                                    if (l.Remain > 0)
                                    {
                                        var tempTk =
                                        _entities.TempTks.FirstOrDefault(
                                            p =>
                                                p.PartId.ToUpper() == l.PartId.ToUpper() &&
                                                p.PartDetailId == t.Id &&
                                                p.xSheetNumber == t.xSheetNumber);

                                        if (tempTk != null)
                                        {
                                            if (tempTk.Remain > 0)
                                            {
                                                double quantity = 0;
                                                if (tempTk.Remain <= l.Remain)
                                                {
                                                    quantity = tempTk.Remain;
                                                    tempTk.Remain = 0;
                                                    l.Remain = l.Remain - quantity;
                                                }
                                                else
                                                {
                                                    quantity = l.Remain;
                                                    tempTk.Remain = tempTk.Remain - l.Remain;
                                                    l.Remain = 0;
                                                }

                                                _entities.TempPartInvoices.AddObject(new TempPartInvoice
                                                {
                                                    InvoiceNumber = invoiceRecord.InvoiceNumber,
                                                    Quantity = quantity,
                                                    TempTkId = tempTk.TempTkId,
                                                    InvoiceDetailId = t.InvoiceDetailId
                                                });
                                            }
                                        }
                                        else
                                        {
                                            var newTempTk = new TempTk
                                            {
                                                PartDetailId = t.Id,
                                                xSheetNumber = t.xSheetNumber,
                                                Remain = t.Remain,
                                                PartId = l.PartId,
                                            };
                                            _entities.TempTks.AddObject(newTempTk);
                                            _entities.SaveChanges();

                                            double quantity = 0;
                                            if (newTempTk.Remain <= l.Remain)
                                            {
                                                quantity = newTempTk.Remain;
                                                newTempTk.Remain = 0;
                                                l.Remain = l.Remain - quantity;
                                            }
                                            else
                                            {
                                                quantity = l.Remain;
                                                newTempTk.Remain = newTempTk.Remain - l.Remain;
                                                l.Remain = 0;
                                            }

                                            _entities.TempPartInvoices.AddObject(new TempPartInvoice
                                            {
                                                InvoiceNumber = invoiceRecord.InvoiceNumber,
                                                Quantity = quantity,
                                                TempTkId = newTempTk.TempTkId,
                                                InvoiceDetailId = t.InvoiceDetailId
                                            });
                                        }
                                    }
                                }
                            }

                            // LUÔN LẤY DANH SÁCH CÁC MÃ ĐÃ XỬ LÝ THÀNH CÔNG
                            _entities.SaveChanges();
                            var listSuggest = (from a in _entities.TempPartInvoices
                                               join b in _entities.TempTks on a.TempTkId equals b.TempTkId
                                               join d in _entities.InvoiceManagements on a.InvoiceNumber equals d.InvoiceNumber
                                               join c in _entities.InvoiceDetails on d.InvoiceId equals c.InvoiceId
                                               join e in _entities.ImParts on b.PartDetailId equals e.ImPartId
                                               join t in _entities.IMs on e.xSheetNumber equals t.xSheetNumber
                                               where a.InvoiceNumber == invoiceRecord.InvoiceNumber && e.PartProductId == c.PartId && a.InvoiceDetailId == c.InvoiceDetailId
                                               select new TempPartInvoiceModel
                                               {
                                                   PartId = c.PartId,
                                                   InvoiceNumber = a.InvoiceNumber,
                                                   Quantity = a.Quantity,
                                                   RemainTK = b.Remain,
                                                   RemainInvoice = c.Remain,
                                                   xSheetNumber = b.xSheetNumber,
                                                   Price = c.Price,
                                                   InvoiceDetailId = a.InvoiceDetailId,
                                                   PartDetailId = b.PartDetailId,
                                                   PoNumber = t.Po,
                                                   xDueDate = t.xDueDate
                                               }).Union(from f in _entities.TempPartInvoices
                                                        join g in _entities.TempTks on f.TempTkId equals g.TempTkId
                                                        join h in _entities.InvoiceManagements on f.InvoiceNumber equals h.InvoiceNumber
                                                        join i in _entities.InvoiceDetails on h.InvoiceId equals i.InvoiceId
                                                        join j in _entities.ExProducts on g.PartDetailId equals j.ProductId
                                                        join z in _entities.EXes on g.xSheetNumber equals z.xSheetNumber
                                                        where f.InvoiceNumber == invoiceRecord.InvoiceNumber && j.PartProductId == i.PartId && f.InvoiceDetailId == i.InvoiceDetailId
                                                        select new TempPartInvoiceModel
                                                        {
                                                            PartId = i.PartId,
                                                            InvoiceNumber = f.InvoiceNumber,
                                                            Quantity = f.Quantity,
                                                            RemainTK = g.Remain,
                                                            RemainInvoice = i.Remain,
                                                            xSheetNumber = g.xSheetNumber,
                                                            Price = i.Price,
                                                            InvoiceDetailId = f.InvoiceDetailId,
                                                            PartDetailId = g.PartDetailId,
                                                            PoNumber = z.Po,
                                                            xDueDate = z.xDueDate
                                                        }
                                                      ).Distinct().OrderBy(p => p.xSheetNumber).ToList();

                            var flag = true;
                            foreach (var b in listSuggest)
                            {
                                var exRecord = _entities.EXes.FirstOrDefault(p => p.xSheetNumber == b.xSheetNumber);
                                if (exRecord != null)
                                {
                                    b.Supplier = exRecord.Supplier;
                                    b.xSheetDate = exRecord.xSheetDate;
                                }
                                var imRecord = _entities.IMs.FirstOrDefault(p => p.xSheetNumber == b.xSheetNumber);
                                if (imRecord != null)
                                {
                                    b.Supplier = imRecord.Supplier;
                                    b.xSheetDate = imRecord.xSheetDate;
                                }
                            }

                            foreach (var b in listSuggest)
                            {
                                if (b.RemainInvoice > 0)
                                {
                                    flag = false;
                                    break;
                                }
                            }

                            // TRẢ VỀ KẾT QUẢ DỰA TRÊN TÌNH HUỐNG
                            if (!String.IsNullOrEmpty(mess) && listSuggest.Any())
                            {
                                // Có lỗi nhưng vẫn có mã hợp lệ được xử lý
                                System.Web.HttpContext.Current.Session["suggestList"] = listSuggest.OrderBy(p => p.xSheetNumber).ToList();
                                scope.Complete();
                                return Json(new { Result = "PARTIAL", Message = mess, rows = listSuggest.OrderBy(p => p.xSheetNumber) }, JsonRequestBehavior.AllowGet);
                            }
                            else if (!String.IsNullOrEmpty(mess) && !listSuggest.Any())
                            {
                                // Tất cả đều lỗi
                                return Json(new { Result = "ERROR", Message = mess }, JsonRequestBehavior.AllowGet);
                            }
                            else if (!flag)
                            {
                                // Không có lỗi nhưng vẫn có remain > 0
                                return Json(new { Result = "OK", rows = listSuggest.OrderBy(p => p.xSheetNumber) }, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                // Tất cả thành công
                                System.Web.HttpContext.Current.Session["suggestList"] = listSuggest.OrderBy(p => p.xSheetNumber).ToList();
                                if (!listSuggest.Any())
                                {
                                    return Json(new { Result = "ERROR", Message = "Không trừ lùi được" }, JsonRequestBehavior.AllowGet);
                                }
                                scope.Complete();
                                return Json(new { Result = "OK", Type = type, rows = listSuggest.OrderBy(p => p.xSheetNumber) }, JsonRequestBehavior.AllowGet);
                            }
                        }
                        scope.Complete();
                        return Json(new { Result = "ERROR", Mesage = "Không trừ lùi được" }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    // Code cho type != 0 giữ nguyên
                    var listTempPartInvoice =
                        _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber).ToList();
                    var listSuggest = (from a in listTempPartInvoice
                                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
                                       join d in _entities.InvoiceManagements on a.InvoiceNumber equals d.InvoiceNumber
                                       join c in _entities.InvoiceDetails on d.InvoiceId equals c.InvoiceId
                                       join e in _entities.ImParts on b.PartDetailId equals e.ImPartId
                                       join z in _entities.IMs on e.xSheetNumber equals z.xSheetNumber
                                       where a.InvoiceNumber == invoiceRecord.InvoiceNumber && e.PartProductId.ToLower() == c.PartId.ToLower() && (c.PartDetailId != null ? c.PartDetailId == e.ImPartId : true)
                                       select new TempPartInvoiceModel
                                       {
                                           PartId = e.PartProductId,
                                           InvoiceNumber = a.InvoiceNumber,
                                           Quantity = a.Quantity,
                                           RemainTK = b.Remain,
                                           RemainInvoice = c.Remain,
                                           xSheetNumber = b.xSheetNumber,
                                           Price = c.Price,
                                           InvoiceDetailId = a.InvoiceDetailId,
                                           PartDetailId = b.PartDetailId,
                                           PoNumber = z.Po,
                                           xDueDate = z.xDueDate,
                                       }).Union(from f in _entities.TempPartInvoices
                                                join g in _entities.TempTks on f.TempTkId equals g.TempTkId
                                                join h in _entities.InvoiceManagements on f.InvoiceNumber equals h.InvoiceNumber
                                                join i in _entities.InvoiceDetails on h.InvoiceId equals i.InvoiceId
                                                join j in _entities.ExProducts on g.PartDetailId equals j.ProductId
                                                join t in _entities.EXes on j.xSheetNumber equals t.xSheetNumber
                                                where f.InvoiceNumber == invoiceRecord.InvoiceNumber && j.PartProductId == i.PartId && (i.PartDetailId != null ? i.PartDetailId == j.ProductId : true)
                                                select new TempPartInvoiceModel
                                                {
                                                    PartId = j.PartProductId,
                                                    InvoiceNumber = f.InvoiceNumber,
                                                    Quantity = f.Quantity,
                                                    RemainTK = g.Remain,
                                                    RemainInvoice = i.Remain,
                                                    xSheetNumber = g.xSheetNumber,
                                                    Price = i.Price,
                                                    InvoiceDetailId = f.InvoiceDetailId,
                                                    PartDetailId = g.PartDetailId,
                                                    PoNumber = t.Po,
                                                    xDueDate = t.xDueDate
                                                }).OrderBy(p => p.xSheetNumber).ToList();
                    foreach (var l in listSuggest)
                    {
                        var exRecord = _entities.EXes.FirstOrDefault(p => p.xSheetNumber == l.xSheetNumber);
                        if (exRecord != null)
                        {
                            l.Supplier = exRecord.Supplier;
                            l.xSheetDate = exRecord.xSheetDate;
                        }
                        var imRecord = _entities.IMs.FirstOrDefault(p => p.xSheetNumber == l.xSheetNumber);
                        if (imRecord != null)
                        {
                            l.Supplier = imRecord.Supplier;
                            l.xSheetDate = imRecord.xSheetDate;
                        }
                        var checkTkEx =
                            _entities.EXes.FirstOrDefault(
                                p =>
                                    p.xSheetNumberEx == l.xSheetNumber &&
                                    p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
                        var checkTkIm =
                           _entities.IMs.FirstOrDefault(
                               p =>
                                   p.xSheetNumberEx == l.xSheetNumber &&
                                   p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
                        var checkTkImpartEx = (from a in _entities.ImPartExes
                                               join b in _entities.ImParts on a.ImPartId equals b.ImPartId
                                               where b.xSheetNumber == l.xSheetNumber
                                               join c in _entities.EXes on a.xSheetNumberEx equals c.xSheetNumber
                                               where c.xInvoiceNumber == l.InvoiceNumber
                                               select c).FirstOrDefault();
                        var checkTkExproductIm = (from a in _entities.ExProductIms
                                                  join b in _entities.ExProducts on a.ProductId equals b.ProductId
                                                  where b.xSheetNumber == l.xSheetNumber
                                                  join c in _entities.IMs on a.xSheetNumberIm equals c.xSheetNumber
                                                  where c.xInvoiceNumber == l.InvoiceNumber
                                                  select c).FirstOrDefault();

                        if (checkTkEx != null) l.xSheetNumberEx = checkTkEx.xSheetNumber;
                        else if (checkTkIm != null) l.xSheetNumberEx = checkTkIm.xSheetNumber;
                        else if (checkTkImpartEx != null) l.xSheetNumberEx = checkTkImpartEx.xSheetNumber;
                        else if (checkTkExproductIm != null) l.xSheetNumberEx = checkTkExproductIm.xSheetNumber;
                        else l.xSheetNumberEx = "Chưa có tờ khai";
                    }
                    System.Web.HttpContext.Current.Session["suggestList"] = listSuggest.OrderBy(p => p.xSheetNumber).ToList();
                    return Json(new { Result = "OK", Type = type, rows = listSuggest }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                _log.Error("Exception: " + ex.ToString());
                if (ex.InnerException != null)
                {
                    _log.Error("InnerException: " + ex.InnerException.ToString());
                    return Json(new { Result = "ERROR", Message = ex.Message + " | Inner: " + ex.InnerException.Message }, JsonRequestBehavior.AllowGet);
                }
                return Json(new { Result = "ERROR", Message = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        private List<dynamic> FindBestLotCombination(List<dynamic> lots, double need)
        {
            // Sort lots by Remain descending to use the largest lots first
            var sortedLots = lots.OrderByDescending(x => (double)x.Remain).ToList();
            var result = new List<dynamic>();
            double total = 0;

            foreach (var lot in sortedLots)
            {
                if (total >= need)
                    break;

                result.Add(lot);
                total += (double)lot.Remain;
            }

            // If we couldn't meet the need, return null
            if (total < need)
                return null;

            return result;
        }






        //public JsonResult Calculate(long InvoiceId = 0, int type = 0)
        //{
        //    try
        //    {
        //        var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
        //        var invoiceRecord =
        //             _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == InvoiceId);
        //        /// Chỗ này thêm vào để test th InvoiceId = null;
        //        //if (invoiceRecord == null)
        //        //{
        //        //    return Json(new { Result = "ERROR", Message = "Không tìm thấy hóa đơn với InvoiceId này." }, JsonRequestBehavior.AllowGet);
        //        //}
        //        String mess = "";
        //        if (type == 0)
        //        {
        //            //if (loginCode != invoiceRecord.CreateBy)
        //            //{
        //            //    if (loginCode != "9171")
        //            //    {
        //            //        return Json(new { Result = "ERROR", Message = "Bạn không phải người tạo invoice này" }, JsonRequestBehavior.AllowGet);
        //            //    }
        //            //}
        //            var transOpts = new TransactionOptions(); //Tao mot transaction de xu ly tat ca
        //            transOpts.IsolationLevel = IsolationLevel.Serializable;
        //            using (var scope = new TransactionScope(TransactionScopeOption.Required, transOpts))
        //            {

        //                if (InvoiceId != 0)
        //                {
        //                    if (invoiceRecord.Active == true)
        //                    {
        //                        return Json(new { Result = "ERROR", Message = "Invoice đã được đưa lên tờ khai" }, JsonRequestBehavior.AllowGet);
        //                    }
        //                    //check tờ khai đã tồn tại chưa
        //                    //var checkExistTK =
        //                    //    _entities.EXes.FirstOrDefault(p => p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
        //                    //if (checkExistTK != null)
        //                    //{
        //                    //    return
        //                    //        Json(new { Result = "ERROR", Message = "Tờ khai đã tồn tại không thể process được" });
        //                    //}
        //                    //check tồn tại trong temp
        //                    var checkTemp =
        //                        _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber)
        //                            .ToList();
        //                    var listPart =
        //                        _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();
        //                    if (checkTemp.Any())
        //                    {
        //                        foreach (var c in checkTemp)
        //                        {
        //                            var tempTk = _entities.TempTks.FirstOrDefault(p => p.TempTkId == c.TempTkId);
        //                            tempTk.Remain = tempTk.Remain + c.Quantity;
        //                            _entities.DeleteObject(c);
        //                        }
        //                        var listInvoiceDetail =
        //                            _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();
        //                        foreach (var a in listInvoiceDetail)
        //                        {
        //                            a.Remain = a.Quantity;
        //                        }
        //                        foreach (var l in listPart)
        //                        {
        //                            if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
        //                            {
        //                                var storePart =
        //                                    _entities.StoreParts.FirstOrDefault(
        //                                        p => p.PartProductId.ToUpper() == l.PartId.ToUpper());
        //                                var oldRemain = storePart.Remain;
        //                                storePart.TotalOut = storePart.TotalOut - l.Quantity;
        //                                storePart.Remain = storePart.RemainBefore + storePart.TotalIn -
        //                                                   storePart.TotalOut +
        //                                                   (storePart.QuantityTlip ?? 0);
        //                                //LogCommon.SaveLog(_entities, new LogTransaction()
        //                                //{
        //                                //    PartProductId = storePart.PartProductId,
        //                                //    Quantity = l.Quantity,
        //                                //    BeforeRemain = oldRemain,
        //                                //    AfterRemain = storePart.Remain ?? 0,
        //                                //    Employee = loginCode,
        //                                //    Date = DateTime.Now,
        //                                //    TranType =
        //                                //        LogTransationEnum.RemoveOldProcessInvoice.ToDescription(),
        //                                //    Negative = false
        //                                //});
        //                            }
        //                        }
        //                        _entities.SaveChanges();
        //                    }
        //                    foreach (var l in listPart)
        //                    {
        //                        var listTk = new List<TKModel>();
        //                        //Tái xuất


        //                        if (invoiceRecord.Type == (int)InvoiceTypeEnum.Taixuat)
        //                        {
        //                            var now = DateTime.Now.Date;
        //                            var lots = (
        //                                from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                where
        //                                    (b.xCategoryCode == "G12" || b.xCategoryCode == "G14" || b.xCategoryCode == "G13") &&
        //                                    b.Disable == null &&
        //                                    (l.OutCountry == null || b.Supplier == l.OutCountry) &&
        //                                    ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary) &&
        //                                    (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                select new
        //                                {
        //                                    xSheetNumber = a.xSheetNumber,
        //                                    xQuantity = a.xQuantity,
        //                                    Remain = a.xRemain,
        //                                    xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                    Status = b.Status,
        //                                    Id = a.ImPartId,
        //                                    InvoiceDetailId = l.InvoiceDetailId,
        //                                    DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xDueDate) ?? 0
        //                                }
        //                            ).ToList();
        //                            _log.Info($"[Calculate] PartId={l.PartId}, Số lô tìm được={lots.Count}");
        //                            var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
        //                            var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

        //                            double totalLess30 = lessThan30.Sum(x => x.Remain);
        //                            double quantity = l.Quantity;
        //                            List<dynamic> selectedLots = new List<dynamic>(lessThan30);

        //                            if (totalLess30 < quantity)
        //                            {
        //                                double need = quantity - totalLess30;
        //                                var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
        //                                if (bestCombo == null)
        //                                {
        //                                    mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
        //                                }
        //                                else
        //                                {
        //                                    selectedLots.AddRange(bestCombo);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                double sum = 0;
        //                                selectedLots = new List<dynamic>();
        //                                foreach (var lot in lessThan30)
        //                                {
        //                                    if (sum >= quantity) break;
        //                                    double take = Math.Min(lot.Remain, quantity - sum);
        //                                    selectedLots.Add(lot);
        //                                    sum += take;
        //                                }
        //                            }
        //                            _log.Info($"[Calculate] PartId={l.PartId}, lessThan30={lessThan30.Count}, greaterOrEqual30={greaterOrEqual30.Count}");

        //                            listTk = selectedLots.Select(x => new TKModel
        //                            {
        //                                xSheetNumber = x.xSheetNumber,
        //                                xQuantity = x.xQuantity,
        //                                Remain = x.Remain,
        //                                xDueDate = x.xDueDate,
        //                                Status = x.Status,
        //                                Id = x.Id,
        //                                InvoiceDetailId = x.InvoiceDetailId
        //                            }).ToList();
        //                        }





        //                        //Tái nhập
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.Tainhap)
        //                        {
        //                            var now = DateTime.Now.Date;
        //                            var lots = (
        //                                from a in _entities.ExProducts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                join b in _entities.EXes on a.xSheetNumber equals b.xSheetNumber
        //                                where b.xCategoryCode == "G61"
        //                                    && b.Disable == null
        //                                    && (
        //                                        l.OutCountry == null
        //                                        || (l.OutCountry == "STB" || l.OutCountry == "DSTH"
        //                                            ? (b.Supplier == "DSTH" || b.Supplier == "STB")
        //                                            : b.Supplier == l.OutCountry)
        //                                    )
        //                                    && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                    && (l.PartDetailId == null || a.ProductId == l.PartDetailId)
        //                                select new
        //                                {
        //                                    xSheetNumber = a.xSheetNumber,
        //                                    xQuantity = a.xQuantity,
        //                                    Remain = a.xRemain ?? 0,
        //                                    xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                    Status = b.Status,
        //                                    Id = a.ProductId,
        //                                    InvoiceDetailId = l.InvoiceDetailId,
        //                                    DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xDueDate) ?? 0
        //                                }
        //                            ).ToList();

        //                            var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
        //                            var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

        //                            double totalLess30 = lessThan30.Sum(x => x.Remain);
        //                            double quantity = l.Quantity;
        //                            List<dynamic> selectedLots = new List<dynamic>(lessThan30);

        //                            if (totalLess30 < quantity)
        //                            {
        //                                double need = quantity - totalLess30;
        //                                var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
        //                                if (bestCombo == null)
        //                                {
        //                                    mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
        //                                }
        //                                else
        //                                {
        //                                    selectedLots.AddRange(bestCombo);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
        //                                double sum = 0;
        //                                selectedLots = new List<dynamic>();
        //                                foreach (var lot in lessThan30)
        //                                {
        //                                    if (sum >= quantity) break;
        //                                    double take = Math.Min(lot.Remain, quantity - sum);
        //                                    selectedLots.Add(lot);
        //                                    sum += take;
        //                                }
        //                            }

        //                            // Chuyển selectedLots sang listTk (TKModel)
        //                            listTk = selectedLots.Select(x => new TKModel
        //                            {
        //                                xSheetNumber = x.xSheetNumber,
        //                                xQuantity = x.xQuantity,
        //                                Remain = x.Remain,
        //                                xDueDate = x.xDueDate,
        //                                Status = x.Status,
        //                                Id = x.Id,
        //                                InvoiceDetailId = x.InvoiceDetailId
        //                            }).ToList();
        //                        }





        //                        //B13 cho A31
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13A31)
        //                        {
        //                            var now = DateTime.Now.Date;
        //                            var lots = (
        //                                from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                where (b.xCategoryCode == "A31") && b.Disable == null
        //                                    && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                    && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                select new
        //                                {
        //                                    xSheetNumber = a.xSheetNumber,
        //                                    xQuantity = a.xQuantity,
        //                                    Remain = a.xRemain,
        //                                    xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                    Status = b.Status,
        //                                    Id = a.ImPartId,
        //                                    InvoiceDetailId = l.InvoiceDetailId,
        //                                    DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
        //                                }
        //                            ).ToList();

        //                            var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
        //                            var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

        //                            double totalLess30 = lessThan30.Sum(x => x.Remain);
        //                            double quantity = l.Quantity;
        //                            List<dynamic> selectedLots = new List<dynamic>(lessThan30);

        //                            if (totalLess30 < quantity)
        //                            {
        //                                double need = quantity - totalLess30;
        //                                var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
        //                                if (bestCombo == null)
        //                                {
        //                                    mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
        //                                }
        //                                else
        //                                {
        //                                    selectedLots.AddRange(bestCombo);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
        //                                double sum = 0;
        //                                selectedLots = new List<dynamic>();
        //                                foreach (var lot in lessThan30)
        //                                {
        //                                    if (sum >= quantity) break;
        //                                    double take = Math.Min(lot.Remain, quantity - sum);
        //                                    selectedLots.Add(lot);
        //                                    sum += take;
        //                                }
        //                            }

        //                            // Chuyển selectedLots sang listTk (TKModel)
        //                            listTk = selectedLots.Select(x => new TKModel
        //                            {
        //                                xSheetNumber = x.xSheetNumber,
        //                                xQuantity = x.xQuantity,
        //                                Remain = x.Remain,
        //                                xDueDate = x.xDueDate,
        //                                Status = x.Status,
        //                                Id = x.Id,
        //                                InvoiceDetailId = x.InvoiceDetailId
        //                            }).ToList();
        //                        }






        //                        //B13 cho A12/E13
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13A12)
        //                        {
        //                            var now = DateTime.Now.Date;
        //                            var lots = (
        //                                from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                where (b.xCategoryCode == "A12" || b.xCategoryCode == "E13")
        //                                    && b.Disable == null
        //                                    && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                    && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                    && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                select new
        //                                {
        //                                    xSheetNumber = a.xSheetNumber,
        //                                    xQuantity = a.xQuantity,
        //                                    Remain = a.xRemain,
        //                                    xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                    Status = b.Status,
        //                                    Id = a.ImPartId,
        //                                    InvoiceDetailId = l.InvoiceDetailId,
        //                                    DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
        //                                }
        //                            ).ToList();

        //                            var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
        //                            var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

        //                            double totalLess30 = lessThan30.Sum(x => x.Remain);
        //                            double quantity = l.Quantity;
        //                            List<dynamic> selectedLots = new List<dynamic>(lessThan30);

        //                            if (totalLess30 < quantity)
        //                            {
        //                                double need = quantity - totalLess30;
        //                                var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
        //                                if (bestCombo == null)
        //                                {
        //                                    mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
        //                                }
        //                                else
        //                                {
        //                                    selectedLots.AddRange(bestCombo);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
        //                                double sum = 0;
        //                                selectedLots = new List<dynamic>();
        //                                foreach (var lot in lessThan30)
        //                                {
        //                                    if (sum >= quantity) break;
        //                                    double take = Math.Min(lot.Remain, quantity - sum);
        //                                    selectedLots.Add(lot);
        //                                    sum += take;
        //                                }
        //                            }

        //                            // Chuyển selectedLots sang listTk (TKModel)
        //                            listTk = selectedLots.Select(x => new TKModel
        //                            {
        //                                xSheetNumber = x.xSheetNumber,
        //                                xQuantity = x.xQuantity,
        //                                Remain = x.Remain,
        //                                xDueDate = x.xDueDate,
        //                                Status = x.Status,
        //                                Id = x.Id,
        //                                InvoiceDetailId = x.InvoiceDetailId
        //                            }).ToList();
        //                        }




        //                        //B13 cho E11/E15
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
        //                        {
        //                            var storePart =
        //                                _entities.StoreParts.FirstOrDefault(
        //                                    p => p.PartProductId.ToUpper() == l.PartId.ToUpper());
        //                            var oldRemain = storePart.Remain;
        //                            storePart.TotalOut = storePart.TotalOut + l.Quantity;
        //                            storePart.Remain = storePart.RemainBefore + storePart.TotalIn - storePart.TotalOut +
        //                                               (storePart.QuantityTlip ?? 0);
        //                            _entities.SaveChanges();

        //                            var now = DateTime.Now.Date;
        //                            var lots = (
        //                                from a in _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                where
        //                                    (b.xCategoryCode == "E11" || b.xCategoryCode == "E15") &&
        //                                    b.Disable == null &&
        //                                    (b.Temporary.Value == false || b.Temporary == null)
        //                                    && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                    && (l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "thanhkhoan" || l.InvoiceTemporary.ToLower() == "vldg" || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                    && (invoiceRecord.FromDate == null ||
        //                                        (b.DateReceiveActual != null
        //                                            ? b.DateReceiveActual >= invoiceRecord.FromDate
        //                                            : b.xDateReceiveDmvn >= invoiceRecord.FromDate))
        //                                    && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                select new
        //                                {
        //                                    xSheetNumber = a.xSheetNumber,
        //                                    xQuantity = a.xQuantity,
        //                                    Remain = a.xRemain,
        //                                    xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                    Status = b.Status,
        //                                    Id = a.ImPartId,
        //                                    InvoiceDetailId = l.InvoiceDetailId,
        //                                    DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
        //                                }
        //                            ).ToList();

        //                            var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
        //                            var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

        //                            double totalLess30 = lessThan30.Sum(x => x.Remain);
        //                            double quantity = l.Quantity;
        //                            List<dynamic> selectedLots = new List<dynamic>(lessThan30);

        //                            if (totalLess30 < quantity)
        //                            {
        //                                double need = quantity - totalLess30;
        //                                var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
        //                                if (bestCombo == null)
        //                                {
        //                                    mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
        //                                }
        //                                else
        //                                {
        //                                    selectedLots.AddRange(bestCombo);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
        //                                double sum = 0;
        //                                selectedLots = new List<dynamic>();
        //                                foreach (var lot in lessThan30)
        //                                {
        //                                    if (sum >= quantity) break;
        //                                    double take = Math.Min(lot.Remain, quantity - sum);
        //                                    selectedLots.Add(lot);
        //                                    sum += take;
        //                                }
        //                            }

        //                            // Chuyển selectedLots sang listTk (TKModel)
        //                            listTk = selectedLots.Select(x => new TKModel
        //                            {
        //                                xSheetNumber = x.xSheetNumber,
        //                                xQuantity = x.xQuantity,
        //                                Remain = x.Remain,
        //                                xDueDate = x.xDueDate,
        //                                Status = x.Status,
        //                                Id = x.Id,
        //                                InvoiceDetailId = x.InvoiceDetailId
        //                            }).ToList();
        //                        }



        //                        // A31 cho E42
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.A31E42)
        //                        {
        //                            var now = DateTime.Now.Date;
        //                            var lots = (
        //                                from a in _entities.ExProducts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                join b in _entities.EXes on a.xSheetNumber equals b.xSheetNumber
        //                                where
        //                                    (b.xCategoryCode == "E42") && b.Disable == null &&
        //                                    (b.Temporary.Value == false || b.Temporary == null)
        //                                    && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                    &&
        //                                    (invoiceRecord.FromDate == null ||
        //                                        (b.DateLeaveActual != null
        //                                            ? b.DateLeaveActual >= invoiceRecord.FromDate
        //                                            : (b.xDateLeaveDmvn == null || b.xDateLeaveDmvn >= invoiceRecord.FromDate)))
        //                                    && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "thanhkhoan") || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                    && (l.PartDetailId == null || a.ProductId == l.PartDetailId)
        //                                select new
        //                                {
        //                                    xSheetNumber = a.xSheetNumber,
        //                                    xQuantity = a.xQuantity,
        //                                    Remain = a.xRemain ?? 0,
        //                                    xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                    Status = b.Status,
        //                                    Id = a.ProductId,
        //                                    InvoiceDetailId = l.InvoiceDetailId,
        //                                    DaysToDue = SqlFunctions.DateDiff("day", now, b.ReviseDate ?? b.xSheetDate) ?? 0
        //                                }
        //                            ).ToList();

        //                            var lessThan30 = lots.Where(x => x.DaysToDue < 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();
        //                            var greaterOrEqual30 = lots.Where(x => x.DaysToDue >= 30).OrderBy(x => x.xDueDate).ThenBy(x => x.xSheetNumber).ToList();

        //                            double totalLess30 = lessThan30.Sum(x => x.Remain);
        //                            double quantity = l.Quantity;
        //                            List<dynamic> selectedLots = new List<dynamic>(lessThan30);

        //                            if (totalLess30 < quantity)
        //                            {
        //                                double need = quantity - totalLess30;
        //                                var bestCombo = FindBestLotCombination(greaterOrEqual30.Cast<dynamic>().ToList(), need);
        //                                if (bestCombo == null)
        //                                {
        //                                    mess += l.PartId + " Không đủ số lượng sản phẩm phù hợp!\n";
        //                                }
        //                                else
        //                                {
        //                                    selectedLots.AddRange(bestCombo);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                // Nếu chỉ cần lấy trong lessThan30, cắt bớt nếu dư
        //                                double sum = 0;
        //                                selectedLots = new List<dynamic>();
        //                                foreach (var lot in lessThan30)
        //                                {
        //                                    if (sum >= quantity) break;
        //                                    double take = Math.Min(lot.Remain, quantity - sum);
        //                                    selectedLots.Add(lot);
        //                                    sum += take;
        //                                }
        //                            }

        //                            // Chuyển selectedLots sang listTk (TKModel)
        //                            listTk = selectedLots.Select(x => new TKModel
        //                            {
        //                                xSheetNumber = x.xSheetNumber,
        //                                xQuantity = x.xQuantity,
        //                                Remain = x.Remain,
        //                                xDueDate = x.xDueDate,
        //                                Status = x.Status,
        //                                Id = x.Id,
        //                                InvoiceDetailId = x.InvoiceDetailId
        //                            }).ToList();
        //                        }



        //                        if (!listTk.Any())
        //                        {
        //                            mess += l.PartId +
        //                                   " Không tìm thấy tờ khai để trừ, bạn vui lòng kiêm tra invoice đầu vào hoặc số lượng còn lại \n";
        //                        }
        //                        //List ra các tờ khai tạm mà còn lại lớn hơn 0
        //                        foreach (var t in listTk)
        //                        {
        //                            if (t.xDueDate != null)
        //                            {
        //                                if (t.xDueDate.Value.Date < DateTime.Now.Date && t.Status != true) continue;
        //                            }
        //                            if (l.Remain > 0)
        //                            {
        //                                //Tìm xem đã có trong temp chưa
        //                                //var tempTk = (from a in _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber)
        //                                //                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
        //                                //                       join c in _entities.ImParts on b.PartDetailId equals c.ImPartId
        //                                //                       where c.PartProductId == l.PartId
        //                                //                       select b
        //                                //                       ).Union(from d in
        //                                //                                    _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber)
        //                                //                                join e in _entities.TempTks on d.TempTkId equals e.TempTkId
        //                                //                                join f in _entities.ExProducts on e.PartDetailId equals f.ProductId
        //                                //                                where f.PartProductId == l.PartId
        //                                //                                select e).FirstOrDefault();

        //                                var tempTk =
        //                                _entities.TempTks.FirstOrDefault(
        //                                    p =>
        //                                        p.PartId.ToUpper() == l.PartId.ToUpper() &&
        //                                        p.PartDetailId == t.Id &&
        //                                        p.xSheetNumber == t.xSheetNumber);
        //                                //Nếu có thì sẽ trừ số lượng còn lại vào temp
        //                                if (tempTk != null)
        //                                {
        //                                    if (tempTk.Remain > 0)
        //                                    {
        //                                        double quantity = 0;
        //                                        if (tempTk.Remain <= l.Remain)
        //                                        {
        //                                            quantity = tempTk.Remain;
        //                                            tempTk.Remain = 0;
        //                                            l.Remain = l.Remain - quantity;
        //                                        }
        //                                        else
        //                                        {
        //                                            quantity = l.Remain;
        //                                            tempTk.Remain = tempTk.Remain - l.Remain;
        //                                            l.Remain = 0;
        //                                        }

        //                                        _entities.TempPartInvoices.AddObject(new TempPartInvoice
        //                                        {
        //                                            InvoiceNumber = invoiceRecord.InvoiceNumber,
        //                                            Quantity = quantity,
        //                                            TempTkId = tempTk.TempTkId,
        //                                            InvoiceDetailId = t.InvoiceDetailId
        //                                        });
        //                                    }
        //                                }
        //                                //Nếu chưa thì add vào temp
        //                                else
        //                                {
        //                                    var newTempTk = new TempTk
        //                                    {
        //                                        PartDetailId = t.Id,
        //                                        xSheetNumber = t.xSheetNumber,
        //                                        Remain = t.Remain,
        //                                        PartId = l.PartId,
        //                                    };
        //                                    _entities.TempTks.AddObject(newTempTk);
        //                                    _entities.SaveChanges(); // newTempTk.TempTkId sẽ có giá trị

        //                                    double quantity = 0;
        //                                    if (newTempTk.Remain <= l.Remain)
        //                                    {
        //                                        quantity = newTempTk.Remain;
        //                                        newTempTk.Remain = 0;
        //                                        l.Remain = l.Remain - quantity;
        //                                    }
        //                                    else
        //                                    {
        //                                        quantity = l.Remain;
        //                                        newTempTk.Remain = newTempTk.Remain - l.Remain;
        //                                        l.Remain = 0;
        //                                    }

        //                                    _entities.TempPartInvoices.AddObject(new TempPartInvoice
        //                                    {
        //                                        InvoiceNumber = invoiceRecord.InvoiceNumber,
        //                                        Quantity = quantity,
        //                                        TempTkId = newTempTk.TempTkId,
        //                                        InvoiceDetailId = t.InvoiceDetailId
        //                                    });
        //                                }
        //                            }
        //                        }
        //                    }
        //                    if (!String.IsNullOrEmpty(mess))
        //                    {
        //                        return Json(new { Result = "ERROR", Message = mess },
        //                        JsonRequestBehavior.AllowGet);
        //                    }
        //                    _entities.SaveChanges();
        //                    var listSuggest = (from a in _entities.TempPartInvoices
        //                                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
        //                                       join d in _entities.InvoiceManagements on a.InvoiceNumber equals d.InvoiceNumber
        //                                       join c in _entities.InvoiceDetails on d.InvoiceId equals c.InvoiceId
        //                                       join e in _entities.ImParts on b.PartDetailId equals e.ImPartId
        //                                       join t in _entities.IMs on e.xSheetNumber equals t.xSheetNumber
        //                                       where a.InvoiceNumber == invoiceRecord.InvoiceNumber && e.PartProductId == c.PartId && a.InvoiceDetailId == c.InvoiceDetailId
        //                                       select new TempPartInvoiceModel
        //                                       {
        //                                           PartId = c.PartId,
        //                                           InvoiceNumber = a.InvoiceNumber,
        //                                           Quantity = a.Quantity,
        //                                           RemainTK = b.Remain,
        //                                           RemainInvoice = c.Remain,
        //                                           xSheetNumber = b.xSheetNumber,
        //                                           Price = c.Price,
        //                                           InvoiceDetailId = a.InvoiceDetailId,
        //                                           PartDetailId = b.PartDetailId,
        //                                           PoNumber = t.Po,
        //                                           xDueDate = t.xDueDate
        //                                       }).Union(from f in _entities.TempPartInvoices
        //                                                join g in _entities.TempTks on f.TempTkId equals g.TempTkId
        //                                                join h in _entities.InvoiceManagements on f.InvoiceNumber equals h.InvoiceNumber
        //                                                join i in _entities.InvoiceDetails on h.InvoiceId equals i.InvoiceId
        //                                                join j in _entities.ExProducts on g.PartDetailId equals j.ProductId
        //                                                join z in _entities.EXes on g.xSheetNumber equals z.xSheetNumber
        //                                                where f.InvoiceNumber == invoiceRecord.InvoiceNumber && j.PartProductId == i.PartId && f.InvoiceDetailId == i.InvoiceDetailId
        //                                                select new TempPartInvoiceModel
        //                                                {
        //                                                    PartId = i.PartId,
        //                                                    InvoiceNumber = f.InvoiceNumber,
        //                                                    Quantity = f.Quantity,
        //                                                    RemainTK = g.Remain,
        //                                                    RemainInvoice = i.Remain,
        //                                                    xSheetNumber = g.xSheetNumber,
        //                                                    Price = i.Price,
        //                                                    InvoiceDetailId = f.InvoiceDetailId,
        //                                                    PartDetailId = g.PartDetailId,
        //                                                    PoNumber = z.Po,
        //                                                    xDueDate = z.xDueDate
        //                                                }
        //                                              ).Distinct().OrderBy(p => p.xSheetNumber).ToList();
        //                    var flag = true;
        //                    foreach (var b in listSuggest)
        //                    {
        //                        var exRecord = _entities.EXes.FirstOrDefault(p => p.xSheetNumber == b.xSheetNumber);
        //                        if (exRecord != null)
        //                        {
        //                            b.Supplier = exRecord.Supplier;
        //                            b.xSheetDate = exRecord.xSheetDate;
        //                        }
        //                        var imRecord = _entities.IMs.FirstOrDefault(p => p.xSheetNumber == b.xSheetNumber);
        //                        if (imRecord != null)
        //                        {
        //                            b.Supplier = imRecord.Supplier;
        //                            b.xSheetDate = imRecord.xSheetDate;
        //                        }
        //                    }
        //                    foreach (var b in listSuggest)
        //                    {
        //                        if (b.RemainInvoice > 0)
        //                        {
        //                            flag = false;
        //                            break;
        //                        }
        //                    }
        //                    if (!flag)
        //                    {
        //                        return Json(new { Result = "OK", rows = listSuggest.OrderBy(p => p.xSheetNumber) }, JsonRequestBehavior.AllowGet);
        //                    }
        //                    System.Web.HttpContext.Current.Session["suggestList"] = listSuggest.OrderBy(p => p.xSheetNumber).ToList();
        //                    if (!listSuggest.Any())
        //                    {
        //                        return Json(new { Result = "ERROR", Message = "Không trừ lùi được" },
        //                            JsonRequestBehavior.AllowGet);
        //                    }
        //                    scope.Complete();
        //                    return Json(new { Result = "OK", Type = type, rows = listSuggest.OrderBy(p => p.xSheetNumber) }, JsonRequestBehavior.AllowGet);
        //                }
        //                scope.Complete();
        //                return Json(new { Result = "ERROR", Mesage = "Không trừ lùi được" }, JsonRequestBehavior.AllowGet);
        //            }
        //        }
        //        else
        //        {
        //            var listTempPartInvoice =
        //                _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber).ToList();
        //            var listSuggest = (from a in listTempPartInvoice
        //                               join b in _entities.TempTks on a.TempTkId equals b.TempTkId
        //                               join d in _entities.InvoiceManagements on a.InvoiceNumber equals d.InvoiceNumber
        //                               join c in _entities.InvoiceDetails on d.InvoiceId equals c.InvoiceId
        //                               join e in _entities.ImParts on b.PartDetailId equals e.ImPartId
        //                               join z in _entities.IMs on e.xSheetNumber equals z.xSheetNumber
        //                               where a.InvoiceNumber == invoiceRecord.InvoiceNumber && e.PartProductId.ToLower() == c.PartId.ToLower() && (c.PartDetailId != null ? c.PartDetailId == e.ImPartId : true)
        //                               select new TempPartInvoiceModel
        //                               {
        //                                   PartId = e.PartProductId,
        //                                   InvoiceNumber = a.InvoiceNumber,
        //                                   Quantity = a.Quantity,
        //                                   RemainTK = b.Remain,
        //                                   RemainInvoice = c.Remain,
        //                                   xSheetNumber = b.xSheetNumber,
        //                                   Price = c.Price,
        //                                   InvoiceDetailId = a.InvoiceDetailId,
        //                                   PartDetailId = b.PartDetailId,
        //                                   PoNumber = z.Po,
        //                                   xDueDate = z.xDueDate,
        //                               }).Union(from f in _entities.TempPartInvoices
        //                                        join g in _entities.TempTks on f.TempTkId equals g.TempTkId
        //                                        join h in _entities.InvoiceManagements on f.InvoiceNumber equals h.InvoiceNumber
        //                                        join i in _entities.InvoiceDetails on h.InvoiceId equals i.InvoiceId
        //                                        join j in _entities.ExProducts on g.PartDetailId equals j.ProductId
        //                                        join t in _entities.EXes on j.xSheetNumber equals t.xSheetNumber
        //                                        where f.InvoiceNumber == invoiceRecord.InvoiceNumber && j.PartProductId == i.PartId && (i.PartDetailId != null ? i.PartDetailId == j.ProductId : true)
        //                                        select new TempPartInvoiceModel
        //                                        {
        //                                            PartId = j.PartProductId,
        //                                            InvoiceNumber = f.InvoiceNumber,
        //                                            Quantity = f.Quantity,
        //                                            RemainTK = g.Remain,
        //                                            RemainInvoice = i.Remain,
        //                                            xSheetNumber = g.xSheetNumber,
        //                                            Price = i.Price,
        //                                            InvoiceDetailId = f.InvoiceDetailId,
        //                                            PartDetailId = g.PartDetailId,
        //                                            PoNumber = t.Po,
        //                                            xDueDate = t.xDueDate
        //                                        }).OrderBy(p => p.xSheetNumber).ToList();
        //            foreach (var l in listSuggest)
        //            {
        //                var exRecord = _entities.EXes.FirstOrDefault(p => p.xSheetNumber == l.xSheetNumber);
        //                if (exRecord != null)
        //                {
        //                    l.Supplier = exRecord.Supplier;
        //                    l.xSheetDate = exRecord.xSheetDate;
        //                }
        //                var imRecord = _entities.IMs.FirstOrDefault(p => p.xSheetNumber == l.xSheetNumber);
        //                if (imRecord != null)
        //                {
        //                    l.Supplier = imRecord.Supplier;
        //                    l.xSheetDate = imRecord.xSheetDate;
        //                }
        //                //kiểm tra đã có tờ khai tái chưa
        //                var checkTkEx =
        //                    _entities.EXes.FirstOrDefault(
        //                        p =>
        //                            p.xSheetNumberEx == l.xSheetNumber &&
        //                            p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
        //                var checkTkIm =
        //                   _entities.IMs.FirstOrDefault(
        //                       p =>
        //                           p.xSheetNumberEx == l.xSheetNumber &&
        //                           p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
        //                var checkTkImpartEx = (from a in _entities.ImPartExes
        //                                       join b in _entities.ImParts on a.ImPartId equals b.ImPartId
        //                                       where b.xSheetNumber == l.xSheetNumber
        //                                       join c in _entities.EXes on a.xSheetNumberEx equals c.xSheetNumber
        //                                       where c.xInvoiceNumber == l.InvoiceNumber
        //                                       select c).FirstOrDefault();
        //                var checkTkExproductIm = (from a in _entities.ExProductIms
        //                                          join b in _entities.ExProducts on a.ProductId equals b.ProductId
        //                                          where b.xSheetNumber == l.xSheetNumber
        //                                          join c in _entities.IMs on a.xSheetNumberIm equals c.xSheetNumber
        //                                          where c.xInvoiceNumber == l.InvoiceNumber
        //                                          select c).FirstOrDefault();

        //                if (checkTkEx != null) l.xSheetNumberEx = checkTkEx.xSheetNumber;
        //                else if (checkTkIm != null) l.xSheetNumberEx = checkTkIm.xSheetNumber;
        //                else if (checkTkImpartEx != null) l.xSheetNumberEx = checkTkImpartEx.xSheetNumber;
        //                else if (checkTkExproductIm != null) l.xSheetNumberEx = checkTkExproductIm.xSheetNumber;
        //                else l.xSheetNumberEx = "Chưa có tờ khai";
        //            }
        //            System.Web.HttpContext.Current.Session["suggestList"] = listSuggest.OrderBy(p => p.xSheetNumber).ToList();
        //            return Json(new { Result = "OK", Type = type, rows = listSuggest }, JsonRequestBehavior.AllowGet);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _log.Error("Exception: " + ex.ToString());
        //        if (ex.InnerException != null)
        //        {
        //            _log.Error("InnerException: " + ex.InnerException.ToString());
        //            return Json(new { Result = "ERROR", Message = ex.Message + " | Inner: " + ex.InnerException.Message }, JsonRequestBehavior.AllowGet);
        //        }
        //        return Json(new { Result = "ERROR", Message = ex.Message }, JsonRequestBehavior.AllowGet);
        //    }
        //}




        //public JsonResult Calculate(long InvoiceId = 0, int type = 0)
        //{
        //    try
        //    {
        //        var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
        //        var invoiceRecord =
        //             _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == InvoiceId);
        //        /// Chỗ này thêm vào để test th InvoiceId = null;
        //        if (invoiceRecord == null)
        //        {
        //            return Json(new { Result = "ERROR", Message = "Không tìm thấy hóa đơn với InvoiceId này." }, JsonRequestBehavior.AllowGet);
        //        }
        //        String mess = "";
        //        if (type == 0)
        //        {
        //            if (loginCode != invoiceRecord.CreateBy)
        //            {
        //                if (loginCode != "9171")
        //                {
        //                    return Json(new { Result = "ERROR", Message = "Bạn không phải người tạo invoice này" }, JsonRequestBehavior.AllowGet);
        //                }
        //            }
        //            var transOpts = new TransactionOptions(); //Tao mot transaction de xu ly tat ca
        //            transOpts.IsolationLevel = IsolationLevel.Serializable;
        //            using (var scope = new TransactionScope(TransactionScopeOption.Required, transOpts))
        //            {
        //                if (InvoiceId != 0)
        //                {
        //                    if (invoiceRecord.Active == true)
        //                    {
        //                        return Json(new { Result = "ERROR", Message = "Invoice đã được đưa lên tờ khai" }, JsonRequestBehavior.AllowGet);
        //                    }
        //                    //check tờ khai đã tồn tại chưa
        //                    //var checkExistTK =
        //                    //    _entities.EXes.FirstOrDefault(p => p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
        //                    //if (checkExistTK != null)
        //                    //{
        //                    //    return
        //                    //        Json(new { Result = "ERROR", Message = "Tờ khai đã tồn tại không thể process được" });
        //                    //}
        //                    //check tồn tại trong temp
        //                    var checkTemp =
        //                        _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber)
        //                            .ToList();
        //                    var listPart =
        //                        _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();
        //                    if (checkTemp.Any())
        //                    {
        //                        foreach (var c in checkTemp)
        //                        {
        //                            var tempTk = _entities.TempTks.FirstOrDefault(p => p.TempTkId == c.TempTkId);
        //                            tempTk.Remain = tempTk.Remain + c.Quantity;
        //                            _entities.DeleteObject(c);
        //                        }
        //                        var listInvoiceDetail =
        //                            _entities.InvoiceDetails.Where(p => p.InvoiceId == invoiceRecord.InvoiceId).ToList();
        //                        foreach (var a in listInvoiceDetail)
        //                        {
        //                            a.Remain = a.Quantity;
        //                        }
        //                        foreach (var l in listPart)
        //                        {
        //                            if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
        //                            {
        //                                var storePart =
        //                                    _entities.StoreParts.FirstOrDefault(
        //                                        p => p.PartProductId.ToUpper() == l.PartId.ToUpper());
        //                                var oldRemain = storePart.Remain;
        //                                storePart.TotalOut = storePart.TotalOut - l.Quantity;
        //                                storePart.Remain = storePart.RemainBefore + storePart.TotalIn -
        //                                                   storePart.TotalOut +
        //                                                   (storePart.QuantityTlip ?? 0);
        //                                //LogCommon.SaveLog(_entities, new LogTransaction()
        //                                //{
        //                                //    PartProductId = storePart.PartProductId,
        //                                //    Quantity = l.Quantity,
        //                                //    BeforeRemain = oldRemain,
        //                                //    AfterRemain = storePart.Remain ?? 0,
        //                                //    Employee = loginCode,
        //                                //    Date = DateTime.Now,
        //                                //    TranType =
        //                                //        LogTransationEnum.RemoveOldProcessInvoice.ToDescription(),
        //                                //    Negative = false
        //                                //});
        //                            }
        //                        }
        //                        _entities.SaveChanges();
        //                    }
        //                    foreach (var l in listPart)
        //                    {
        //                        var listTk = new List<TKModel>();
        //                        //Tái xuất
        //                        if (invoiceRecord.Type == (int)InvoiceTypeEnum.Taixuat)
        //                        {
        //                            listTk =
        //                                (from a in
        //                                     _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                 join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                 where
        //                                     (b.xCategoryCode == "G12" || b.xCategoryCode == "G14" || b.xCategoryCode == "G13") &&
        //                                     b.Disable == null
        //                                     &&
        //                                     (l.OutCountry == null ||
        //                                      b.Supplier == l.OutCountry)
        //                                          && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                          && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                 orderby b.xDueDate, b.xSheetNumber
        //                                 select new TKModel
        //                                 {
        //                                     xSheetNumber = a.xSheetNumber,
        //                                     xQuantity = a.xQuantity,
        //                                     Remain = a.xRemain,
        //                                     xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                     Status = b.Status,
        //                                     Id = a.ImPartId,
        //                                     InvoiceDetailId = l.InvoiceDetailId
        //                                 }).OrderBy(p => (p.xDueDate)).ThenBy(p => p.xSheetNumber).ToList();
        //                        }
        //                        //Tái nhập
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.Tainhap)
        //                        {
        //                            listTk =
        //                                (from a in
        //                                     _entities.ExProducts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                 join b in _entities.EXes on a.xSheetNumber equals b.xSheetNumber
        //                                 where b.xCategoryCode == "G61" && b.Disable == null
        //                                       &&
        //                                       (l.OutCountry == null ||
        //                                        ((l.OutCountry == "STB" || l.OutCountry == "DSTH")
        //                                            ? (b.Supplier == "DSTH" || b.Supplier == "STB")
        //                                            : b.Supplier == l.OutCountry))
        //                                            && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                               && (l.PartDetailId == null || a.ProductId == l.PartDetailId)
        //                                 select new TKModel
        //                                 {
        //                                     xSheetNumber = a.xSheetNumber,
        //                                     xQuantity = a.xQuantity,
        //                                     Remain = a.xRemain.Value,
        //                                     xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                     Status = b.Status,
        //                                     Id = a.ProductId,
        //                                     InvoiceDetailId = l.InvoiceDetailId
        //                                 }).OrderBy(p => (p.xDueDate)).ThenBy(p => p.xSheetNumber).ToList();
        //                        }
        //                        //B13 cho A31
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13A31)
        //                        {
        //                            listTk =
        //                                (from a in
        //                                     _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                 join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                 where (b.xCategoryCode == "A31") && b.Disable == null
        //                                       && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                        && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                 orderby b.xSheetDate, b.xSheetNumber
        //                                 select new TKModel
        //                                 {
        //                                     xSheetNumber = a.xSheetNumber,
        //                                     xQuantity = a.xQuantity,
        //                                     Remain = a.xRemain,
        //                                     xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                     Status = b.Status,
        //                                     Id = a.ImPartId,
        //                                     InvoiceDetailId = l.InvoiceDetailId
        //                                 }).ToList();
        //                        }

        //                        //B13 cho A12
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13A12)
        //                        {
        //                            listTk =
        //                                (from a in
        //                                     _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                 join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                 where (b.xCategoryCode == "A12" || b.xCategoryCode == "E13") && b.Disable == null
        //                                       && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                        && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                          && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "vldg") || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                 orderby b.xSheetDate, b.xSheetNumber
        //                                 select new TKModel
        //                                 {
        //                                     xSheetNumber = a.xSheetNumber,
        //                                     xQuantity = a.xQuantity,
        //                                     Remain = a.xRemain,
        //                                     xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                     Status = b.Status,
        //                                     Id = a.ImPartId,
        //                                     InvoiceDetailId = l.InvoiceDetailId
        //                                 }).ToList();
        //                        }
        //                        //B13 cho E11/E15
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.B13E11)
        //                        {
        //                            var storePart =
        //                                _entities.StoreParts.FirstOrDefault(
        //                                    p => p.PartProductId.ToUpper() == l.PartId.ToUpper());
        //                            var oldRemain = storePart.Remain;
        //                            storePart.TotalOut = storePart.TotalOut + l.Quantity;
        //                            storePart.Remain = storePart.RemainBefore + storePart.TotalIn - storePart.TotalOut +
        //                                               (storePart.QuantityTlip ?? 0);
        //                            //LogCommon.SaveLog(_entities, new LogTransaction()
        //                            //{
        //                            //    PartProductId = storePart.PartProductId,
        //                            //    Quantity = l.Quantity,
        //                            //    BeforeRemain = oldRemain,
        //                            //    AfterRemain = storePart.Remain ?? 0,
        //                            //    Employee = loginCode,
        //                            //    Date = DateTime.Now,
        //                            //    TranType =
        //                            //        LogTransationEnum.Process.ToDescription(),
        //                            //    Negative = true
        //                            //});
        //                            _entities.SaveChanges();
        //                            listTk =
        //                                (from a in
        //                                     _entities.ImParts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                 join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
        //                                 where
        //                                     (b.xCategoryCode == "E11" || b.xCategoryCode == "E15") &&
        //                                     b.Disable == null &&
        //                                     (b.Temporary.Value == false || b.Temporary == null)
        //                                     && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                     && (l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "thanhkhoan" || l.InvoiceTemporary.ToLower() == "vldg" || b.xInvoiceNumber == l.InvoiceTemporary) &&
        //                                     (invoiceRecord.FromDate == null ||
        //                                      (b.DateReceiveActual != null
        //                                          ? b.DateReceiveActual >= invoiceRecord.FromDate
        //                                          : b.xDateReceiveDmvn >= invoiceRecord.FromDate))
        //                                           && (l.PartDetailId == null || a.ImPartId == l.PartDetailId)
        //                                 orderby b.xSheetDate, b.xSheetNumber
        //                                 select new TKModel
        //                                 {
        //                                     xSheetNumber = a.xSheetNumber,
        //                                     xQuantity = a.xQuantity,
        //                                     Remain = a.xRemain,
        //                                     xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                     Status = b.Status,
        //                                     Id = a.ImPartId,
        //                                     InvoiceDetailId = l.InvoiceDetailId
        //                                 }).ToList();
        //                        }
        //                        //A31 cho E42
        //                        else if (invoiceRecord.Type == (int)InvoiceTypeEnum.A31E42)
        //                        {
        //                            listTk =
        //                                (from a in
        //                                     _entities.ExProducts.Where(p => p.PartProductId == l.PartId && p.xRemain > 0)
        //                                 join b in _entities.EXes on a.xSheetNumber equals b.xSheetNumber
        //                                 where
        //                                     (b.xCategoryCode == "E42") && b.Disable == null &&
        //                                     (b.Temporary.Value == false || b.Temporary == null)
        //                                     && (l.OutCountry == null || b.Supplier == l.OutCountry)
        //                                     &&
        //                                     (invoiceRecord.FromDate == null ||
        //                                      (b.DateLeaveActual != null
        //                                          ? b.DateLeaveActual >= invoiceRecord.FromDate
        //                                          : (b.xDateLeaveDmvn == null || b.xDateLeaveDmvn >= invoiceRecord.FromDate)))
        //                                           && ((l.InvoiceTemporary == null || l.InvoiceTemporary.ToLower() == "thanhkhoan") || b.xInvoiceNumber == l.InvoiceTemporary)
        //                                           && (l.PartDetailId == null || a.ProductId == l.PartDetailId)
        //                                 orderby b.xSheetDate, b.xSheetNumber
        //                                 select new TKModel
        //                                 {
        //                                     xSheetNumber = a.xSheetNumber,
        //                                     xQuantity = a.xQuantity,
        //                                     Remain = a.xRemain ?? 0,
        //                                     xDueDate = b.ReviseDate ?? b.xDueDate,
        //                                     Status = b.Status,
        //                                     Id = a.ProductId,
        //                                     InvoiceDetailId = l.InvoiceDetailId
        //                                 }).ToList();
        //                        }
        //                        if (!listTk.Any())
        //                        {
        //                            mess += l.PartId +
        //                                   " Không tìm thấy tờ khai để trừ, bạn vui lòng kiêm tra invoice đầu vào hoặc số lượng còn lại \n";
        //                        }
        //                        //List ra các tờ khai tạm mà còn lại lớn hơn 0
        //                        foreach (var t in listTk)
        //                        {
        //                            if (t.xDueDate != null)
        //                            {
        //                                if (t.xDueDate.Value.Date < DateTime.Now.Date && t.Status != true) continue;
        //                            }
        //                            if (l.Remain > 0)
        //                            {
        //                                //Tìm xem đã có trong temp chưa
        //                                //var tempTk = (from a in _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber)
        //                                //                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
        //                                //                       join c in _entities.ImParts on b.PartDetailId equals c.ImPartId
        //                                //                       where c.PartProductId == l.PartId
        //                                //                       select b
        //                                //                       ).Union(from d in
        //                                //                                    _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber)
        //                                //                                join e in _entities.TempTks on d.TempTkId equals e.TempTkId
        //                                //                                join f in _entities.ExProducts on e.PartDetailId equals f.ProductId
        //                                //                                where f.PartProductId == l.PartId
        //                                //                                select e).FirstOrDefault();

        //                                var tempTk =
        //                                  _entities.TempTks.FirstOrDefault(
        //                                      p =>
        //                                          p.PartId.ToUpper() == l.PartId.ToUpper() &&
        //                                          p.PartDetailId == t.Id &&
        //                                          p.xSheetNumber == t.xSheetNumber);
        //                                //Nếu có thì sẽ trừ số lượng còn lại vào temp
        //                                if (tempTk != null)
        //                                {
        //                                    if (tempTk.Remain > 0)
        //                                    {
        //                                        double quantity = 0;
        //                                        if (tempTk.Remain <= l.Remain)
        //                                        {
        //                                            quantity = tempTk.Remain;
        //                                            tempTk.Remain = 0;
        //                                            l.Remain = l.Remain - quantity;
        //                                        }
        //                                        else
        //                                        {
        //                                            quantity = l.Remain;
        //                                            tempTk.Remain = tempTk.Remain - l.Remain;
        //                                            l.Remain = 0;
        //                                        }

        //                                        var maxId = 1L;
        //                                        if (_entities.TempPartInvoices.Any())
        //                                        {
        //                                            maxId = _entities.TempPartInvoices.Max(x => x.Id) + 1;
        //                                        }

        //                                        _entities.TempPartInvoices.AddObject(new TempPartInvoice
        //                                        {
        //                                            Id = maxId,
        //                                            InvoiceNumber =
        //                                                invoiceRecord.InvoiceNumber,
        //                                            Quantity = quantity,
        //                                            TempTkId = tempTk.TempTkId,
        //                                            InvoiceDetailId = t.InvoiceDetailId
        //                                        });
        //                                    }
        //                                }
        //                                //Nếu chưa thì add vào temp
        //                                else
        //                                {
        //                                    _entities.TempTks.AddObject(new TempTk
        //                                    {
        //                                        PartDetailId = t.Id,
        //                                        xSheetNumber = t.xSheetNumber,
        //                                        Remain = t.Remain,
        //                                        PartId = l.PartId,
        //                                    });
        //                                    _entities.SaveChanges();
        //                                    var tempTks =
        //                                        _entities.TempTks
        //                                            .OrderByDescending(p => p.TempTkId)
        //                                            .FirstOrDefault();
        //                                    double quantity = 0;
        //                                    if (tempTks.Remain <= l.Remain)
        //                                    {
        //                                        quantity = tempTks.Remain;
        //                                        tempTks.Remain = 0;
        //                                        l.Remain = l.Remain - quantity;
        //                                    }
        //                                    else
        //                                    {
        //                                        quantity = l.Remain;
        //                                        tempTks.Remain = tempTks.Remain - l.Remain;
        //                                        l.Remain = 0;
        //                                    }

        //                                    var maxId = 1L;
        //                                    if (_entities.TempPartInvoices.Any())
        //                                    {
        //                                        maxId = _entities.TempPartInvoices.Max(x => x.Id) + 1;
        //                                    }
        //                                    _entities.TempPartInvoices.AddObject(new TempPartInvoice
        //                                    {
        //                                        Id = maxId,
        //                                        InvoiceNumber =
        //                                            invoiceRecord.InvoiceNumber,
        //                                        Quantity = quantity,
        //                                        TempTkId = tempTks.TempTkId,
        //                                        InvoiceDetailId = t.InvoiceDetailId
        //                                    });
        //                                }
        //                            }
        //                        }
        //                    }
        //                    if (!String.IsNullOrEmpty(mess))
        //                    {
        //                        return Json(new { Result = "ERROR", Message = mess },
        //                        JsonRequestBehavior.AllowGet);
        //                    }
        //                    _entities.SaveChanges();
        //                    var listSuggest = (from a in _entities.TempPartInvoices
        //                                       join b in _entities.TempTks on a.TempTkId equals b.TempTkId
        //                                       join d in _entities.InvoiceManagements on a.InvoiceNumber equals d.InvoiceNumber
        //                                       join c in _entities.InvoiceDetails on d.InvoiceId equals c.InvoiceId
        //                                       join e in _entities.ImParts on b.PartDetailId equals e.ImPartId
        //                                       join t in _entities.IMs on e.xSheetNumber equals t.xSheetNumber
        //                                       where a.InvoiceNumber == invoiceRecord.InvoiceNumber && e.PartProductId == c.PartId && a.InvoiceDetailId == c.InvoiceDetailId
        //                                       select new TempPartInvoiceModel
        //                                       {
        //                                           PartId = c.PartId,
        //                                           InvoiceNumber = a.InvoiceNumber,
        //                                           Quantity = a.Quantity,
        //                                           RemainTK = b.Remain,
        //                                           RemainInvoice = c.Remain,
        //                                           xSheetNumber = b.xSheetNumber,
        //                                           Price = c.Price,
        //                                           InvoiceDetailId = a.InvoiceDetailId,
        //                                           PartDetailId = b.PartDetailId,
        //                                           PoNumber = t.Po,
        //                                           xDueDate = t.xDueDate
        //                                       }).Union(from f in _entities.TempPartInvoices
        //                                                join g in _entities.TempTks on f.TempTkId equals g.TempTkId
        //                                                join h in _entities.InvoiceManagements on f.InvoiceNumber equals h.InvoiceNumber
        //                                                join i in _entities.InvoiceDetails on h.InvoiceId equals i.InvoiceId
        //                                                join j in _entities.ExProducts on g.PartDetailId equals j.ProductId
        //                                                join z in _entities.EXes on g.xSheetNumber equals z.xSheetNumber
        //                                                where f.InvoiceNumber == invoiceRecord.InvoiceNumber && j.PartProductId == i.PartId && f.InvoiceDetailId == i.InvoiceDetailId
        //                                                select new TempPartInvoiceModel
        //                                                {
        //                                                    PartId = i.PartId,
        //                                                    InvoiceNumber = f.InvoiceNumber,
        //                                                    Quantity = f.Quantity,
        //                                                    RemainTK = g.Remain,
        //                                                    RemainInvoice = i.Remain,
        //                                                    xSheetNumber = g.xSheetNumber,
        //                                                    Price = i.Price,
        //                                                    InvoiceDetailId = f.InvoiceDetailId,
        //                                                    PartDetailId = g.PartDetailId,
        //                                                    PoNumber = z.Po,
        //                                                    xDueDate = z.xDueDate
        //                                                }
        //                                              ).Distinct().OrderBy(p => p.xSheetNumber).ToList();
        //                    var flag = true;
        //                    foreach (var b in listSuggest)
        //                    {
        //                        var exRecord = _entities.EXes.FirstOrDefault(p => p.xSheetNumber == b.xSheetNumber);
        //                        if (exRecord != null)
        //                        {
        //                            b.Supplier = exRecord.Supplier;
        //                            b.xSheetDate = exRecord.xSheetDate;
        //                        }
        //                        var imRecord = _entities.IMs.FirstOrDefault(p => p.xSheetNumber == b.xSheetNumber);
        //                        if (imRecord != null)
        //                        {
        //                            b.Supplier = imRecord.Supplier;
        //                            b.xSheetDate = imRecord.xSheetDate;
        //                        }
        //                    }
        //                    foreach (var b in listSuggest)
        //                    {
        //                        if (b.RemainInvoice > 0)
        //                        {
        //                            flag = false;
        //                            break;
        //                        }
        //                    }
        //                    if (!flag)
        //                    {
        //                        return Json(new { Result = "OK", rows = listSuggest.OrderBy(p => p.xSheetNumber) }, JsonRequestBehavior.AllowGet);
        //                    }
        //                    System.Web.HttpContext.Current.Session["suggestList"] = listSuggest.OrderBy(p => p.xSheetNumber).ToList();
        //                    if (!listSuggest.Any())
        //                    {
        //                        return Json(new { Result = "ERROR", Message = "Không trừ lùi được" },
        //                            JsonRequestBehavior.AllowGet);
        //                    }
        //                    scope.Complete();
        //                    return Json(new { Result = "OK", Type = type, rows = listSuggest.OrderBy(p => p.xSheetNumber) }, JsonRequestBehavior.AllowGet);
        //                }
        //                scope.Complete();
        //                return Json(new { Result = "ERROR", Mesage = "Không trừ lùi được" });
        //            }
        //        }
        //        else
        //        {
        //            var listTempPartInvoice =
        //                _entities.TempPartInvoices.Where(p => p.InvoiceNumber == invoiceRecord.InvoiceNumber).ToList();
        //            var listSuggest = (from a in listTempPartInvoice
        //                               join b in _entities.TempTks on a.TempTkId equals b.TempTkId
        //                               join d in _entities.InvoiceManagements on a.InvoiceNumber equals d.InvoiceNumber
        //                               join c in _entities.InvoiceDetails on d.InvoiceId equals c.InvoiceId
        //                               join e in _entities.ImParts on b.PartDetailId equals e.ImPartId
        //                               join z in _entities.IMs on e.xSheetNumber equals z.xSheetNumber
        //                               where a.InvoiceNumber == invoiceRecord.InvoiceNumber && e.PartProductId.ToLower() == c.PartId.ToLower() && (c.PartDetailId != null ? c.PartDetailId == e.ImPartId : true)
        //                               select new TempPartInvoiceModel
        //                               {
        //                                   PartId = e.PartProductId,
        //                                   InvoiceNumber = a.InvoiceNumber,
        //                                   Quantity = a.Quantity,
        //                                   RemainTK = b.Remain,
        //                                   RemainInvoice = c.Remain,
        //                                   xSheetNumber = b.xSheetNumber,
        //                                   Price = c.Price,
        //                                   InvoiceDetailId = a.InvoiceDetailId,
        //                                   PartDetailId = b.PartDetailId,
        //                                   PoNumber = z.Po,
        //                                   xDueDate = z.xDueDate,
        //                               }).Union(from f in _entities.TempPartInvoices
        //                                        join g in _entities.TempTks on f.TempTkId equals g.TempTkId
        //                                        join h in _entities.InvoiceManagements on f.InvoiceNumber equals h.InvoiceNumber
        //                                        join i in _entities.InvoiceDetails on h.InvoiceId equals i.InvoiceId
        //                                        join j in _entities.ExProducts on g.PartDetailId equals j.ProductId
        //                                        join t in _entities.EXes on j.xSheetNumber equals t.xSheetNumber
        //                                        where f.InvoiceNumber == invoiceRecord.InvoiceNumber && j.PartProductId == i.PartId && (i.PartDetailId != null ? i.PartDetailId == j.ProductId : true)
        //                                        select new TempPartInvoiceModel
        //                                        {
        //                                            PartId = j.PartProductId,
        //                                            InvoiceNumber = f.InvoiceNumber,
        //                                            Quantity = f.Quantity,
        //                                            RemainTK = g.Remain,
        //                                            RemainInvoice = i.Remain,
        //                                            xSheetNumber = g.xSheetNumber,
        //                                            Price = i.Price,
        //                                            InvoiceDetailId = f.InvoiceDetailId,
        //                                            PartDetailId = g.PartDetailId,
        //                                            PoNumber = t.Po,
        //                                            xDueDate = t.xDueDate
        //                                        }).OrderBy(p => p.xSheetNumber).ToList();
        //            foreach (var l in listSuggest)
        //            {
        //                var exRecord = _entities.EXes.FirstOrDefault(p => p.xSheetNumber == l.xSheetNumber);
        //                if (exRecord != null)
        //                {
        //                    l.Supplier = exRecord.Supplier;
        //                    l.xSheetDate = exRecord.xSheetDate;
        //                }
        //                var imRecord = _entities.IMs.FirstOrDefault(p => p.xSheetNumber == l.xSheetNumber);
        //                if (imRecord != null)
        //                {
        //                    l.Supplier = imRecord.Supplier;
        //                    l.xSheetDate = imRecord.xSheetDate;
        //                }
        //                //kiểm tra đã có tờ khai tái chưa
        //                var checkTkEx =
        //                    _entities.EXes.FirstOrDefault(
        //                        p =>
        //                            p.xSheetNumberEx == l.xSheetNumber &&
        //                            p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
        //                var checkTkIm =
        //                   _entities.IMs.FirstOrDefault(
        //                       p =>
        //                           p.xSheetNumberEx == l.xSheetNumber &&
        //                           p.xInvoiceNumber == invoiceRecord.InvoiceNumber);
        //                var checkTkImpartEx = (from a in _entities.ImPartExes
        //                                       join b in _entities.ImParts on a.ImPartId equals b.ImPartId
        //                                       where b.xSheetNumber == l.xSheetNumber
        //                                       join c in _entities.EXes on a.xSheetNumberEx equals c.xSheetNumber
        //                                       where c.xInvoiceNumber == l.InvoiceNumber
        //                                       select c).FirstOrDefault();
        //                var checkTkExproductIm = (from a in _entities.ExProductIms
        //                                          join b in _entities.ExProducts on a.ProductId equals b.ProductId
        //                                          where b.xSheetNumber == l.xSheetNumber
        //                                          join c in _entities.IMs on a.xSheetNumberIm equals c.xSheetNumber
        //                                          where c.xInvoiceNumber == l.InvoiceNumber
        //                                          select c).FirstOrDefault();

        //                if (checkTkEx != null) l.xSheetNumberEx = checkTkEx.xSheetNumber;
        //                else if (checkTkIm != null) l.xSheetNumberEx = checkTkIm.xSheetNumber;
        //                else if (checkTkImpartEx != null) l.xSheetNumberEx = checkTkImpartEx.xSheetNumber;
        //                else if (checkTkExproductIm != null) l.xSheetNumberEx = checkTkExproductIm.xSheetNumber;
        //                else l.xSheetNumberEx = "Chưa có tờ khai";
        //            }
        //            System.Web.HttpContext.Current.Session["suggestList"] = listSuggest.OrderBy(p => p.xSheetNumber).ToList();
        //            return Json(new { Result = "OK", Type = type, rows = listSuggest }, JsonRequestBehavior.AllowGet);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        // Log chi tiết lỗi, bao gồm cả inner exception nếu có
        //        _log.Error("Exception: " + ex.ToString());
        //        if (ex.InnerException != null)
        //        {
        //            _log.Error("InnerException: " + ex.InnerException.ToString());
        //        }
        //        // Trả về message chi tiết cho client (chỉ nên dùng khi debug, không nên để production)
        //        return Json(new { Result = "ERROR", Message = ex.ToString() }, JsonRequestBehavior.AllowGet);
        //    }
        //}

        // 

        public JsonResult GetListProduct(string term, long invoiceId)
        {
            try
            {
                var inv = _entities.InvoiceManagements.FirstOrDefault(d => d.InvoiceId == invoiceId);

                var fromDate = inv == null ? null : inv.FromDate;

                var listPart = new List<String>();
                var listImpart = (from a in _entities.ImParts.Where(p => p.PartProductId.Contains(term))
                                  join b in _entities.IMs on a.xSheetNumber equals b.xSheetNumber
                                  where fromDate != null ? b.xSheetDate >= fromDate : true
                                  select a.PartProductId).Distinct().ToList();
                var listExproduct = (from a in _entities.ExProducts.Where(p => p.PartProductId.Contains(term))
                                     from b in _entities.EXes
                                     where a.xSheetNumber == b.xSheetNumber && (fromDate != null ? b.xSheetDate >= fromDate : true)
                                     select a.PartProductId).Distinct().ToList();

                listPart.AddRange(listExproduct);
                listPart.AddRange(listImpart);
                listPart = listPart.Distinct().ToList();
                return Json(listPart, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                return null;
                throw;
            }
        }

        public JsonResult GetProductOptionsJq(string partNo)
        {
            try
            {
                if (!string.IsNullOrEmpty(partNo))
                {
                    var product = _entities.ImParts.Where(p => p.PartProductId == partNo).FirstOrDefault();
                    if (product != null)
                    {
                        var model = new { product.PartProductId };
                        return Json(new { Result = "OK", Record = model });
                    }
                }
                return
                    Json(new { Result = "ERROR", Message = "Can't find this Part" });
            }
            catch (Exception e)
            {
                _log.Error(e);
                return Json(new { Result = "ERROR", Message = "Can't connect to Server." });
            }
        }

        public JsonResult GetListSupplier(string term)
        {
            try
            {
                var suppliers =
                    _entities.SupplierCustomers.Select(p => p.ShortName)
                        .Where(p => p.Contains(term))
                        .Distinct()
                        .ToList();

                return Json(suppliers, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                return null;
                throw;
            }
        }

        public JsonResult GetSupplierOptionsJq(string sup)
        {
            try
            {
                if (!string.IsNullOrEmpty(sup))
                {
                    var suppliers =
                        _entities.SupplierCustomers.Where(p => p.ShortName == sup).FirstOrDefault();
                    if (suppliers != null)
                    {
                        var model = new { suppliers.ShortName };
                        return Json(new { Result = "OK", Record = model });
                    }
                }
                return
                    Json(new { Result = "ERROR", Message = "Can't find this Supplier" });
            }
            catch (Exception e)
            {
                _log.Error(e);
                return Json(new { Result = "ERROR", Message = "Can't connect to Server." });
            }
        }

        //Jqgrid
        public JsonResult GetCustomer()
        {
            var list =
                _entities.Customers
                    .Select(p => new { p.CustomerId, p.Customer1, p.Address })
                    .ToList();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public PartialViewResult CreateInvoice(long invoiceId = 0)
        {
            invoiceId = 81;
            var listType = new List<SelectListItem>();
            listType.Insert(0, new SelectListItem { Selected = true, Text = "Tái xuất", Value = "0" });
            listType.Insert(1, new SelectListItem { Text = "Tái nhập", Value = "1" });
            listType.Insert(2, new SelectListItem { Text = "B13 cho A31", Value = "2" });
            listType.Insert(3, new SelectListItem { Text = "Tạm nhập", Value = "3" });
            listType.Insert(4, new SelectListItem { Text = "Tạm xuất", Value = "4" });
            listType.Insert(5, new SelectListItem { Text = "B13 cho E11/E15", Value = "5" });
            listType.Insert(6, new SelectListItem { Text = "A31 cho E42", Value = "6" });
            listType.Insert(7, new SelectListItem { Text = "Other", Value = "7" });
            listType.Insert(8, new SelectListItem { Text = "B13 cho A12/E13", Value = "8" });
            ViewBag.TypeList = listType;

            var listCustomer = new List<SelectListItem>();
            listCustomer = _entities.Customers.Select(p => new SelectListItem
            {
                Text = p.Customer1,
                Value =
                    SqlFunctions.StringConvert((double)p.CustomerId)
                    .Trim()
            }).ToList();
            listCustomer
                .Insert(0, new SelectListItem { Selected = true, Text = "Lựa chọn", Value = "" });
            ViewBag.CustomerList = listCustomer;

            var listAttn = new List<SelectListItem>();
            listAttn = _entities.ATTNs.Select(p => new SelectListItem
            {
                Text = p.ATTN1,
                Value = p.ATTN1
            }).ToList();
            listAttn
                .Insert(0, new SelectListItem { Text = "Lựa chọn", Value = "" });
            ViewBag.ATTNList = listAttn;

            var listVia = new List<SelectListItem>();
            listVia
                .Insert(0, new SelectListItem { Text = "Lựa chọn", Value = "" });
            listVia.Insert(1, new SelectListItem { Text = "SEA", Value = "SEA" });
            listVia.Insert(2, new SelectListItem { Text = "AIR", Value = "AIR" });

            ViewBag.ViaList = listVia;

            var listFreight = new List<SelectListItem>();
            listFreight
                .Insert(0, new SelectListItem { Text = "Lựa chọn", Value = "" });
            listFreight.Insert(1, new SelectListItem { Text = "COLLECT", Value = "COLLECT" });
            listFreight.Insert(2, new SelectListItem { Text = "PREPAID", Value = "PREPAID" });
            ViewBag.FreightList = listFreight;
            ViewBag.IsEdit = false;
            if (invoiceId != 0)
            {
                var invoiceRecord = _entities.InvoiceManagements.Select(p => new InvoiceModel
                {
                    InvoiceId = p.InvoiceId,
                    InvoiceNumber = p.InvoiceNumber,
                    Destination = p.Destination,
                    DateRegister = p.DateRegister,
                    ATT = p.ATT,
                    Currency = p.Currency,
                    Trade = p.Trade,
                    Customer = p.Customer,
                    Forwarder = p.Forwarder,
                    Via = p.Via,
                    Freight = p.Freight,
                    GW = p.GW,
                    NW = p.NW,
                    Package = p.Package,
                    PoNo = p.PoNo,
                    Purpose = p.Purpose,
                    Type = p.Type,
                    Active = p.Active,
                    FromDate = p.FromDate
                })
                    .FirstOrDefault(p => p.InvoiceId == invoiceId);
                if (invoiceRecord != null)
                {
                    var customerId = invoiceRecord.Customer;
                    var customerRecord = _entities.Customers.FirstOrDefault(p => p.CustomerId == customerId);
                    if (customerRecord != null) invoiceRecord.Address = customerRecord.Address;
                }
                ViewBag.IsEdit = true;
                return PartialView(invoiceRecord);
            }

            return PartialView(new InvoiceModel() { InvoiceNumber = "" });
        }


        public JsonResult GetAddressOfCustomer(long customerId)
        {
            try
            {
                var customer = _entities.Customers.Select(p => new
                {
                    p.CustomerId,
                    p.Address,
                    p.Customer1,
                    p.Postcode
                }).FirstOrDefault(p => p.CustomerId == customerId);
                return Json(new { Result = "OK", Record = customer });
            }
            catch (Exception e)
            {
                _log.Error(e);
                return Json(new { Result = "ERROR", Message = "Can't connect to Server." });
            }
        }

        public ActionResult ExportInvoice(long InvoiceId)
        {
            //get invoice
            var invoiceRecord = _entities.InvoiceManagements.Select(p => new InvoiceModel
            {
                InvoiceId = p.InvoiceId,
                InvoiceNumber = p.InvoiceNumber,
                Destination = p.Destination,
                DateRegister = p.DateRegister,
                ATT = p.ATT,
                Currency = p.Currency,
                Trade = p.Trade,
                Customer = p.Customer,
                Forwarder = p.Forwarder,
                Freight = p.Freight,
                Via = p.Via,
                GW = p.GW,
                NW = p.NW,
                Package = p.Package,
                PoNo = p.PoNo,
                Purpose = p.Purpose,
                Type = p.Type,
                Active = p.Active
            })
                .FirstOrDefault(p => p.InvoiceId == InvoiceId);
            if (invoiceRecord != null)
            {
                {
                    var customerId = invoiceRecord.Customer;
                    var customerRecord = _entities.Customers.FirstOrDefault(p => p.CustomerId == customerId);
                    if (customerRecord != null)
                    {
                        invoiceRecord.Address = customerRecord.Address;
                        invoiceRecord.CustomerName = customerRecord.Customer1;
                    }
                }

                var attn = invoiceRecord.ATT;
                var attnRecord = _entities.ATTNs.FirstOrDefault(p => p.ATTN1 == attn);
                if (attnRecord != null)
                {
                    invoiceRecord.Dep = attnRecord.Dept;
                    invoiceRecord.Tel = attnRecord.Tel;
                    invoiceRecord.Fax = attnRecord.Fax;
                    invoiceRecord.Nicenet = attnRecord.Nicenet;
                    invoiceRecord.Ext = attnRecord.Ext;
                }
            }
            var listPart =
                _entities.InvoiceDetails.Where(p => p.InvoiceId == InvoiceId).Select(p => new InvoiceDetailModel
                {
                    InvoiceId = InvoiceId,
                    InvoiceDetailId =
                        p.InvoiceDetailId,
                    Remain = p.Remain,
                    OutCountry = p.OutCountry,
                    Quantity = p.Quantity,
                    PartId = p.PartId,
                    PartProductName =
                        p.PartProductName,
                    Origin = p.Origin,
                    Unit = p.Unit,
                    Price = p.Price ?? 0,
                    Amount =
                        ((p.Price ?? 0) *
                         p.Quantity)
                }).ToList();
            //Export
            const string filename = "Invoice_Export.xlsx";
            Response.ContentType = "application/vnd.ms-excel";
            Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", filename));
            Response.Clear();
            var path = Server.MapPath("../Content/Forms/");
            var exportHelper = new ExcelExport();
            var mywrite = exportHelper.ExportReport(invoiceRecord, listPart, path);
            mywrite.WriteTo(Response.OutputStream);
            Response.End();
            return View();
        }

        //Export ra gợi ý FW
        public ActionResult ExportSuggestion()
        {
            var listSuggest =
                (List<TempPartInvoiceModel>)System.Web.HttpContext.Current.Session["suggestList"];
            if (listSuggest != null)
            {
                //Export
                const string filename = "Suggestion_Export.xls";
                Response.ContentType = "application/vnd.ms-excel";
                Response.AddHeader("Content-Disposition", string.Format("attachment;filename={0}", filename));
                Response.Clear();
                var exportHelper = new ExcelExport();
                var mywrite = exportHelper.SuggestionReport(listSuggest);
                mywrite.WriteTo(Response.OutputStream);
                Response.End();
                return View();
            }
            return null;
        }

        //ImportInvoiceDetail
        public PartialViewResult ImportInvoiceDetail(long invoiceId)
        {
            var invoice = _entities.InvoiceManagements.FirstOrDefault(p => p.InvoiceId == invoiceId);
            return PartialView(invoice);
        }

        public virtual FileResult DownloadForm()
        {
            var contentType = "application/ms-excel";
            DirectoryInfo dirInfo = null;
            var filename = "";
            try
            {
                dirInfo = new DirectoryInfo(HostingEnvironment.MapPath("~/Content/Forms"));
                filename = dirInfo + "\\Import_InvoiceDetail.xlsx";
                var x = File(filename, contentType, "Import_InvoiceDetail.xlsx");
                return x;
            }
            catch (Exception exception)
            {
                _log.Error(exception);
                filename = dirInfo + "\\Import_InvoiceDetail.xlsx";
                return File(filename, contentType, "Import_InvoiceDetail.xlsx");
            }
        }

        [HttpPost]
        public JsonResult FileAdd()
        {
            try
            {
                var loginCode = CookieStore.GetCookie(GlobalKeyCookie.EmployeeId);
                if (string.IsNullOrEmpty(loginCode))
                    return Json(new { Result = "ERROR", Message = "Please login !" });
                var InvoiceId = long.Parse(Request.Form["InvoiceId"]);
                var file = Request.Files[0];
                var fileName = Path.GetFileName(file.FileName);
                var pathRoot = Server.MapPath("~/Content/Upload/");
                var path = pathRoot + fileName;
                file.SaveAs(path);

                var fileName1 =
                    string.Concat(
                        Server.MapPath("~/Content/Upload/" +
                                       fileName));
                var excelConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName1 +
                                            ";Extended Properties=Excel 12.0;Persist Security Info=False";
                var excelConnection = new OleDbConnection(excelConnectionString);
                excelConnection.Open();
                var dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                var sheetName = "Sheet1$";
                foreach (DataRow dr in dt.Rows)
                {
                    sheetName = dr[2].ToString().Replace("'", "");
                    break;
                }
                OleDbDataAdapter adapter;
                adapter = new OleDbDataAdapter("Select * from [" + sheetName + "]", excelConnection);
                var ds = new DataSet();
                adapter.Fill(ds);
                dt = ds.Tables[0];
                excelConnection.Close();
                const int startPoint = 1;
                var mess = string.Empty;
                var iRow = startPoint;
                var count = 0;
                var helper = new Helper();
                if (ds.Tables[0].Rows.Count == 0)
                {
                    mess += "File nhập vào không đúng.";
                }
                for (var j = 0; j < (ds.Tables[0].Rows.Count - 1); j++)
                {
                    try
                    {
                        //mã sản phẩm 
                        var partId = helper.ChuanHoaString(dt.Rows[iRow][0].ToString());
                        //sl
                        var quantity = int.Parse(helper.ChuanHoaString(dt.Rows[iRow][1].ToString()));
                        //dvt
                        var unit = helper.ChuanHoaString(dt.Rows[iRow][2].ToString());
                        //giá
                        var price = helper.ConvertStringToDouble(dt.Rows[iRow][3].ToString());
                        //xuất xứ
                        var origin = helper.ChuanHoaString(dt.Rows[iRow][4].ToString());
                        //quốc gia
                        var country = helper.ChuanHoaString(dt.Rows[iRow][5].ToString());

                        var invoiceTempo = helper.ChuanHoaString(dt.Rows[iRow][6].ToString());

                        if (string.IsNullOrEmpty(partId) || string.IsNullOrEmpty(unit) ||
                            string.IsNullOrEmpty(origin))
                        {
                            mess += "Dòng " + (iRow + 1) + " chưa nhập đủ thông tin. ";
                        }
                        //var checkSupplier = _entities.SupplierCustomers.FirstOrDefault(p => p.ShortName == country);
                        //if (checkSupplier == null)
                        //{
                        //    return Json(new { Result = "ERROR", Message = "Nhà cung cấp không có trong database" });
                        //}
                        iRow = iRow + 1;

                        _entities.InvoiceDetails.AddObject(new InvoiceDetail
                        {
                            Quantity = quantity,
                            Price = price.Value,
                            PartId = partId,
                            Origin = origin,
                            OutCountry = country == "" ? null : country,
                            Unit = unit,
                            InvoiceId = InvoiceId,
                            Remain = quantity,
                            InvoiceTemporary = invoiceTempo
                        });
                    }
                    catch (Exception ex)
                    {
                        mess += ".Lỗi tại bản ghi số: " + iRow;
                        iRow = iRow + 1;
                        continue;
                        throw;
                    }
                }
                if (mess != string.Empty)
                {
                    return Json(new { Result = "ERROR", Message = mess });
                }
                _entities.SaveChanges();
                return Json(new { Result = "OK" });
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                return
                    Json(
                        new
                        {
                            Result = "ERROR",
                            Message =
                                "ERROR: Please choose other file. Reason: Exception, " + ex.InnerException.Message +
                                ", " + ex.Message
                        });
            }
        }
    }
}